{"version":3,"file":"raman-spectrum.min.js","sources":["../node_modules/is-any-array/src/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/extend/index.js","../node_modules/ml-savitzky-golay-generalized/node_modules/ml-stat/array.js","../node_modules/ml-savitzky-golay-generalized/src/index.js","../node_modules/ml-gsd/src/gsd.js","../node_modules/ml-matrix/src/symbol-species.js","../node_modules/ml-matrix/src/dc/lu.js","../node_modules/ml-matrix/src/dc/util.js","../node_modules/ml-matrix/src/dc/svd.js","../node_modules/ml-stat/array.js","../node_modules/ml-stat/matrix.js","../node_modules/ml-stat/index.js","../node_modules/ml-matrix/node_modules/ml-array-utils/src/ArrayUtils.js","../node_modules/ml-matrix/node_modules/ml-array-utils/src/getEquallySpaced.js","../node_modules/ml-matrix/node_modules/ml-array-utils/src/snv.js","../node_modules/ml-matrix/node_modules/ml-array-utils/src/index.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/views/base.js","../node_modules/ml-matrix/src/views/transpose.js","../node_modules/ml-matrix/src/views/row.js","../node_modules/ml-matrix/src/views/sub.js","../node_modules/ml-matrix/src/views/selection.js","../node_modules/ml-matrix/src/views/column.js","../node_modules/ml-matrix/src/views/flipRow.js","../node_modules/ml-matrix/src/views/flipColumn.js","../node_modules/ml-matrix/src/abstractMatrix.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/dc/evd.js","../node_modules/ml-matrix/src/dc/qr.js","../node_modules/ml-matrix/src/dc/cholesky.js","../node_modules/ml-matrix/src/decompositions.js","../node_modules/ml-matrix/src/index.js","../node_modules/ml-curve-fitting/src/algebra.js","../node_modules/ml-curve-fitting/src/LM.js","../node_modules/ml-curve-fitting/src/index.js","../node_modules/ml-optimize-lorentzian/src/index.js","../node_modules/ml-gsd/src/post/optimizePeaks.js","../node_modules/ml-gsd/src/post/joinBroadPeaks.js","../node_modules/ml-gsd/src/post/broadenPeaks.js","../node_modules/ml-gsd/src/index.js","../node_modules/jcampconverter/src/index.js","../node_modules/ml-array-xy-sort-x/src/index.js","../node_modules/ml-arrayxy-uniquex/src/index.js","../node_modules/xy-parser/src/index.js","../lib/index.js"],"sourcesContent":["'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction min(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var min = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] < min) min = input[i];\n  }\n\n  return min;\n}\n\nexport default min;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction max(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var max = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] > max) max = input[i];\n  }\n\n  return max;\n}\n\nexport default max;\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = Infinity;\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw \"Vectors do not have the same dimensions\";\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    }\n    else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    }\n    else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof(eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = values.slice();\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n","//Code translate from Pascal source in http://pubs.acs.org/doi/pdf/10.1021/ac00205a007\nvar extend = require('extend');\nvar stat = require('ml-stat');\n\nvar defaultOptions = {\n    windowSize: 9,\n    derivative: 0,\n    polynomial: 3,\n};\n\n\nfunction SavitzkyGolay(data, h, options) {\n    options = extend({}, defaultOptions, options);\n\n    if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))\n            throw new RangeError('Invalid window size (should be odd and at least 5 integer number)')\n\n\n    if (options.windowSize>data.length)\n        throw new RangeError('Window size is higher than the data length '+options.windowSize+\">\"+data.length);\n    if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))\n        throw new RangeError('Derivative should be a positive integer');\n    if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))\n        throw new RangeError('Polynomial should be a positive integer');\n    if (options.polynomial >= 6)\n        console.warn('You should not use polynomial grade higher than 5 if you are' +\n            ' not sure that your data arises from such a model. Possible polynomial oscillation problems');\n\n    var windowSize = options.windowSize;\n\n    var half = Math.floor(windowSize/2);\n    var np = data.length;\n    var ans = new Array(np);\n    var weights = fullWeights(windowSize,options.polynomial,options.derivative);\n    var hs = 0;\n    var constantH = true;\n    if( Object.prototype.toString.call( h ) === '[object Array]' ) {\n        constantH = false;\n    }\n    else{\n        hs = Math.pow(h, options.derivative);\n    }\n    //console.log(\"Constant h: \"+constantH);\n    //For the borders\n    for(var i=0;i<half;i++){\n        var wg1=weights[half-i-1];\n        var wg2=weights[half+i+1];\n        var d1 = 0,d2=0;\n        for (var l = 0; l < windowSize; l++){\n            d1 += wg1[l] * data[l];\n            d2 += wg2[l] * data[np-windowSize+l-1];\n        }\n        if(constantH){\n            ans[half-i-1] = d1/hs;\n            ans[np-half+i] = d2/hs;\n        }\n        else{\n            hs = getHs(h,half-i-1,half, options.derivative);\n            ans[half-i-1] = d1/hs;\n            hs = getHs(h,np-half+i,half, options.derivative);\n            ans[np-half+i] = d2/hs;\n        }\n    }\n    //For the internal points\n    var wg = weights[half];\n    for(var i=windowSize;i<np+1;i++){\n        var d = 0;\n        for (var l = 0; l < windowSize; l++)\n            d += wg[l] * data[l+i-windowSize];\n        if(!constantH)\n            hs = getHs(h,i-half-1,half, options.derivative);\n        ans[i-half-1] = d/hs;\n    }\n    return ans;\n}\n\nfunction getHs(h,center,half,derivative){\n    var hs = 0;\n    var count = 0;\n    for(var i=center-half;i<center+half;i++){\n        if(i>=0 && i < h.length-1){\n            hs+= (h[i+1]-h[i]);\n            count++;\n        }\n    }\n    return Math.pow(hs/count,derivative);\n}\n\nfunction GramPoly(i,m,k,s){\n    var Grampoly = 0;\n    if(k>0){\n        Grampoly = (4*k-2)/(k*(2*m-k+1))*(i*GramPoly(i,m,k-1,s) +\n            s*GramPoly(i,m,k-1,s-1)) - ((k-1)*(2*m+k))/(k*(2*m-k+1))*GramPoly(i,m,k-2,s);\n    }\n    else{\n        if(k==0&&s==0){\n            Grampoly=1;\n        }\n        else{\n            Grampoly=0;\n        }\n    }\n    //console.log(Grampoly);\n    return Grampoly;\n}\n\nfunction GenFact(a,b){\n    var gf=1;\n    if(a>=b){\n        for(var j=a-b+1;j<=a;j++){\n            gf*=j;\n        }\n    }\n    return gf;\n}\n\nfunction Weight(i,t,m,n,s){\n    var sum=0;\n    for(var k=0;k<=n;k++){\n        //console.log(k);\n        sum+=(2*k+1)*(GenFact(2*m,k)/GenFact(2*m+k+1,k+1))*GramPoly(i,m,k,0)*GramPoly(t,m,k,s)\n    }\n    return sum;\n}\n\n/**\n *\n * @param m  Number of points\n * @param n  Polynomial grade\n * @param s  Derivative\n */\nfunction fullWeights(m,n,s){\n    var weights = new Array(m);\n    var np = Math.floor(m/2);\n    for(var t=-np;t<=np;t++){\n        weights[t+np] = new Array(m);\n        for(var j=-np;j<=np;j++){\n            weights[t+np][j+np]=Weight(j,t,np,n,s);\n        }\n    }\n    return weights;\n}\n\n/*function entropy(data,h,options){\n    var trend = SavitzkyGolay(data,h,trendOptions);\n    var copy = new Array(data.length);\n    var sum = 0;\n    var max = 0;\n    for(var i=0;i<data.length;i++){\n        copy[i] = data[i]-trend[i];\n    }\n\n    sum/=data.length;\n    console.log(sum+\" \"+max);\n    console.log(stat.array.standardDeviation(copy));\n    console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));\n    return sum;\n\n}\n\n\n\nfunction guessWindowSize(data, h){\n    console.log(\"entropy \"+entropy(data,h,trendOptions));\n    return 5;\n}\n*/\nmodule.exports = SavitzkyGolay;\n \n","'use strict';\n\nconst SG = require('ml-savitzky-golay-generalized');\n\nconst defaultOptions = {\n  sgOptions: {\n    windowSize: 9,\n    polynomial: 3\n  },\n  minMaxRatio: 0.00025,\n  broadRatio: 0.0,\n  maxCriteria: true,\n  smoothY: true,\n  realTopDetection: false,\n  heightFactor: 0,\n  boundaries: false,\n  derivativeThreshold: -1\n};\n\n/**\n * Global spectra deconvolution\n * @param {Array<number>} x - Independent variable\n * @param {Array<number>} yIn - Dependent variable\n * @param {object} [options] - Options object\n * @param {object} [options.sgOptions] - Options object for Savitzky-Golay filter. See https://github.com/mljs/savitzky-golay-generalized#options\n * @param {number} [options.sgOptions.windowSize = 9] - points to use in the approximations\n * @param {number} [options.sgOptions.polynomial = 3] - degree of the polynomial to use in the approximations\n * @param {number} [options.minMaxRatio = 0.00025] - Threshold to determine if a given peak should be considered as a noise\n * @param {number} [options.broadRatio = 0.00] - If `broadRatio` is higher than 0, then all the peaks which second derivative\n * smaller than `broadRatio * maxAbsSecondDerivative` will be marked with the soft mask equal to true.\n * @param {number} [options.noiseLevel = 0] - Noise threshold in spectrum units\n * @param {boolean} [options.maxCriteria = true] - Peaks are local maximum(true) or minimum(false)\n * @param {boolean} [options.smoothY = true] - Select the peak intensities from a smoothed version of the independent variables\n * @param {boolean} [options.realTopDetection = false] - Use a quadratic optimizations with the peak and its 3 closest neighbors\n * to determine the true x,y values of the peak?\n * @param {number} [options.heightFactor = 0] - Factor to multiply the calculated height (usually 2)\n * @param {boolean} [options.boundaries = false] - Return also the inflection points of the peaks\n * @param {number} [options.derivativeThreshold = -1] - Filters based on the amplitude of the first derivative\n * @return {Array<object>}\n */\nfunction gsd(x, yIn, options) {\n  options = Object.assign({}, defaultOptions, options);\n  let sgOptions = options.sgOptions;\n  const y = [].concat(yIn);\n\n  if (!('noiseLevel' in options)) {\n    // We have to know if x is equally spaced\n    var maxDx = 0;\n\n    var minDx = Number.MAX_VALUE;\n\n    var tmp;\n    for (let i = 0; i < x.length - 1; ++i) {\n      tmp = Math.abs(x[i + 1] - x[i]);\n      if (tmp < minDx) {\n        minDx = tmp;\n      }\n      if (tmp > maxDx) {\n        maxDx = tmp;\n      }\n    }\n\n    if ((maxDx - minDx) / maxDx < 0.05) {\n      options.noiseLevel = getNoiseLevel(y);\n    } else {\n      options.noiseLevel = 0;\n    }\n  }\n  const yCorrection = { m: 1, b: options.noiseLevel };\n  if (!options.maxCriteria) {\n    yCorrection.m = -1;\n    yCorrection.b *= -1;\n  }\n\n  for (let i = 0; i < y.length; i++) {\n    y[i] = yCorrection.m * y[i] - yCorrection.b;\n  }\n\n  for (let i = 0; i < y.length; i++) {\n    if (y[i] < 0) {\n      y[i] = 0;\n    }\n  }\n  // If the max difference between delta x is less than 5%, then, we can assume it to be equally spaced variable\n  let Y = y;\n  let dY, ddY;\n  if ((maxDx - minDx) / maxDx < 0.05) {\n    if (options.smoothY) {\n      Y = SG(y, x[1] - x[0], {\n        windowSize: sgOptions.windowSize,\n        polynomial: sgOptions.polynomial,\n        derivative: 0\n      });\n    }\n    dY = SG(y, x[1] - x[0], {\n      windowSize: sgOptions.windowSize,\n      polynomial: sgOptions.polynomial,\n      derivative: 1\n    });\n    ddY = SG(y, x[1] - x[0], {\n      windowSize: sgOptions.windowSize,\n      polynomial: sgOptions.polynomial,\n      derivative: 2\n    });\n  } else {\n    if (options.smoothY) {\n      Y = SG(y, x, {\n        windowSize: sgOptions.windowSize,\n        polynomial: sgOptions.polynomial,\n        derivative: 0\n      });\n    }\n    dY = SG(y, x, {\n      windowSize: sgOptions.windowSize,\n      polynomial: sgOptions.polynomial,\n      derivative: 1\n    });\n    ddY = SG(y, x, {\n      windowSize: sgOptions.windowSize,\n      polynomial: sgOptions.polynomial,\n      derivative: 2\n    });\n  }\n\n  const X = x;\n  const dx = x[1] - x[0];\n  var maxDdy = 0;\n  var maxY = 0;\n  for (let i = 0; i < Y.length; i++) {\n    if (Math.abs(ddY[i]) > maxDdy) {\n      maxDdy = Math.abs(ddY[i]);\n    }\n    if (Math.abs(Y[i]) > maxY) {\n      maxY = Math.abs(Y[i]);\n    }\n  }\n\n  var lastMax = null;\n  var lastMin = null;\n  var minddY = new Array(Y.length - 2);\n  var intervalL = new Array(Y.length);\n  var intervalR = new Array(Y.length);\n  var broadMask = new Array(Y.length - 2);\n  var minddYLen = 0;\n  var intervalLLen = 0;\n  var intervalRLen = 0;\n  var broadMaskLen = 0;\n  // By the intermediate value theorem We cannot find 2 consecutive maximum or minimum\n  for (let i = 1; i < Y.length - 1; ++i) {\n    // filter based on derivativeThreshold\n    if (Math.abs(dY[i]) > options.derivativeThreshold) {\n      // Minimum in first derivative\n      if (\n        (dY[i] < dY[i - 1] && dY[i] <= dY[i + 1]) ||\n        (dY[i] <= dY[i - 1] && dY[i] < dY[i + 1])\n      ) {\n        lastMin = {\n          x: X[i],\n          index: i\n        };\n        if (dx > 0 && lastMax !== null) {\n          intervalL[intervalLLen++] = lastMax;\n          intervalR[intervalRLen++] = lastMin;\n        }\n      }\n\n      // Maximum in first derivative\n      if (\n        (dY[i] >= dY[i - 1] && dY[i] > dY[i + 1]) ||\n        (dY[i] > dY[i - 1] && dY[i] >= dY[i + 1])\n      ) {\n        lastMax = {\n          x: X[i],\n          index: i\n        };\n        if (dx < 0 && lastMin !== null) {\n          intervalL[intervalLLen++] = lastMax;\n          intervalR[intervalRLen++] = lastMin;\n        }\n      }\n    }\n\n    // Minimum in second derivative\n    if (ddY[i] < ddY[i - 1] && ddY[i] < ddY[i + 1]) {\n      // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n      minddY[minddYLen++] = i; // ( [X[i], Y[i], i] );\n      broadMask[broadMaskLen++] =\n        Math.abs(ddY[i]) <= options.broadRatio * maxDdy;\n    }\n  }\n  minddY.length = minddYLen;\n  intervalL.length = intervalLLen;\n  intervalR.length = intervalRLen;\n  broadMask.length = broadMaskLen;\n\n  let signals = new Array(minddY.length);\n  let signalsLen = 0;\n  let lastK = -1;\n  let possible, frequency, distanceJ, minDistance, gettingCloser;\n  for (let j = 0; j < minddY.length; ++j) {\n    frequency = X[minddY[j]];\n    possible = -1;\n    let k = lastK + 1;\n    minDistance = Number.MAX_VALUE;\n    distanceJ = 0;\n    gettingCloser = true;\n    while (possible === -1 && k < intervalL.length && gettingCloser) {\n      distanceJ = Math.abs(frequency - (intervalL[k].x + intervalR[k].x) / 2);\n\n      // Still getting closer?\n      if (distanceJ < minDistance) {\n        minDistance = distanceJ;\n      } else {\n        gettingCloser = false;\n      }\n      if (distanceJ < Math.abs(intervalL[k].x - intervalR[k].x) / 2) {\n        possible = k;\n        lastK = k;\n      }\n      ++k;\n    }\n\n    if (possible !== -1) {\n      if (Math.abs(Y[minddY[j]]) > options.minMaxRatio * maxY) {\n        signals[signalsLen++] = {\n          index: minddY[j],\n          x: frequency,\n          y: (Y[minddY[j]] + yCorrection.b) / yCorrection.m,\n          width: Math.abs(intervalR[possible].x - intervalL[possible].x), // widthCorrection\n          soft: broadMask[j]\n        };\n        if (options.boundaries) {\n          signals[signalsLen - 1].left = intervalL[possible];\n          signals[signalsLen - 1].right = intervalR[possible];\n        }\n        if (options.heightFactor) {\n          let yLeft = Y[intervalL[possible].index];\n          let yRight = Y[intervalR[possible].index];\n          signals[signalsLen - 1].height =\n            options.heightFactor *\n            (signals[signalsLen - 1].y - (yLeft + yRight) / 2);\n        }\n      }\n    }\n  }\n  signals.length = signalsLen;\n\n  if (options.realTopDetection) {\n    realTopDetection(signals, X, Y);\n  }\n\n  // Correct the values to fit the original spectra data\n  for (let j = 0; j < signals.length; j++) {\n    signals[j].base = options.noiseLevel;\n  }\n\n  signals.sort(function (a, b) {\n    return a.x - b.x;\n  });\n\n  return signals;\n}\n\nfunction getNoiseLevel(y) {\n  var mean = 0;\n\n  var stddev = 0;\n  var length = y.length;\n  for (let i = 0; i < length; ++i) {\n    mean += y[i];\n  }\n  mean /= length;\n  var averageDeviations = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    averageDeviations[i] = Math.abs(y[i] - mean);\n  }\n  averageDeviations.sort();\n  if (length % 2 === 1) {\n    stddev = averageDeviations[(length - 1) / 2] / 0.6745;\n  } else {\n    stddev =\n      (0.5 *\n        (averageDeviations[length / 2] + averageDeviations[length / 2 - 1])) /\n      0.6745;\n  }\n\n  return stddev;\n}\n\nfunction realTopDetection(peakList, x, y) {\n  var alpha, beta, gamma, p, currentPoint;\n  for (var j = 0; j < peakList.length; j++) {\n    currentPoint = peakList[j].index; // peakList[j][2];\n    // The detected peak could be moved 1 or 2 unit to left or right.\n    if (\n      y[currentPoint - 1] >= y[currentPoint - 2] &&\n      y[currentPoint - 1] >= y[currentPoint]\n    ) {\n      currentPoint--;\n    } else {\n      if (\n        y[currentPoint + 1] >= y[currentPoint] &&\n        y[currentPoint + 1] >= y[currentPoint + 2]\n      ) {\n        currentPoint++;\n      } else {\n        if (\n          y[currentPoint - 2] >= y[currentPoint - 3] &&\n          y[currentPoint - 2] >= y[currentPoint - 1]\n        ) {\n          currentPoint -= 2;\n        } else {\n          if (\n            y[currentPoint + 2] >= y[currentPoint + 1] &&\n            y[currentPoint + 2] >= y[currentPoint + 3]\n          ) {\n            currentPoint += 2;\n          }\n        }\n      }\n    }\n    // interpolation to a sin() function\n    if (\n      y[currentPoint - 1] > 0 &&\n      y[currentPoint + 1] > 0 &&\n      y[currentPoint] >= y[currentPoint - 1] &&\n      y[currentPoint] >= y[currentPoint + 1]\n    ) {\n      alpha = 20 * Math.log10(y[currentPoint - 1]);\n      beta = 20 * Math.log10(y[currentPoint]);\n      gamma = 20 * Math.log10(y[currentPoint + 1]);\n      p = (0.5 * (alpha - gamma)) / (alpha - 2 * beta + gamma);\n      // console.log(alpha, beta, gamma, `p: ${p}`);\n      // console.log(x[currentPoint]+\" \"+tmp+\" \"+currentPoint);\n      peakList[j].x =\n        x[currentPoint] + (x[currentPoint] - x[currentPoint - 1]) * p;\n      peakList[j].y =\n        y[currentPoint] -\n        0.25 * (y[currentPoint - 1] - y[currentPoint + 1]) * p;\n    }\n  }\n}\n\nmodule.exports = gsd;\n","'use strict';\n\nif (!Symbol.species) {\n    Symbol.species = Symbol.for('@@species');\n}\n","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n\n    matrix = Matrix.Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare()) {\n            throw new Error('Matrix must be square');\n        }\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++) {\n            determinant *= data[j][j];\n        }\n        return determinant;\n    },\n    get lowerTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows) {\n            throw new Error('Invalid matrix dimensions');\n        }\n        if (this.isSingular()) {\n            throw new Error('LU matrix is singular');\n        }\n\n        var count = value.columns;\n        var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n        var columns = lu.columns;\n        var i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n// For use in the decomposition algorithms. With big matrices, access time is\n// too long on elements from array subclass\n// todo check when it is fixed in v8\n// http://jsperf.com/access-and-write-array-subclass\nexports.getEmpty2DArray = function (rows, columns) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n    }\n    return array;\n};\n\nexports.getFilled2DArray = function (rows, columns, value) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n        for (var j = 0; j < columns; j++) {\n            array[i][j] = value;\n        }\n    }\n    return array;\n};\n","'use strict';\n\nvar Matrix = require('../matrix');\nvar util = require('./util');\nvar hypotenuse = util.hypotenuse;\nvar getFilled2DArray = util.getFilled2DArray;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false) wantu = false;\n    if (options.computeRightSingularVectors === false) wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n        if (!autoTranspose) {\n            a = value.clone();\n            // eslint-disable-next-line no-console\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = value.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    } else {\n        a = value.clone();\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = getFilled2DArray(m, nu, 0),\n        V = getFilled2DArray(n, n, 0),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0) {\n                    e[k] = 0 - e[k];\n                }\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n            // no default\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.U)) {\n            this.U = new Matrix.Matrix(this.U);\n        }\n        return this.U;\n    },\n    get rightSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.V)) {\n            this.V = new Matrix.Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n        var U = this.U;\n        var V = this.rightSingularVectors;\n\n        var VL = V.mmul(Ls),\n            vrows = V.rows,\n            urows = U.length,\n            VLU = Matrix.Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.Matrix.diag(value));\n    },\n    inverse: function () {\n        var V = this.V;\n        var e = this.threshold,\n            vrows = V.length,\n            vcols = V[0].length,\n            X = new Matrix.Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var U = this.U;\n\n        var urows = U.length,\n            ucols = U[0].length,\n            Y = new Matrix.Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = values[0];\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\n/**\n * IEEE Transactions on biomedical engineering, vol. 52, no. 1, january 2005, p. 76-\n * Calculate the standard deviation via the Median of the absolute deviation\n *  The formula for the standard deviation only holds for Gaussian random variables.\n * @returns {{mean: number, stdev: number}}\n */\nexports.robustMeanAndStdev = function robustMeanAndStdev(y) {\n    var mean = 0, stdev = 0;\n    var length = y.length, i = 0;\n    for (i = 0; i < length; i++) {\n        mean += y[i];\n    }\n    mean /= length;\n    var averageDeviations = new Array(length);\n    for (i = 0; i < length; i++)\n        averageDeviations[i] = Math.abs(y[i] - mean);\n    averageDeviations.sort(compareNumbers);\n    if (length % 2 === 1) {\n        stdev = averageDeviations[(length - 1) / 2] / 0.6745;\n    } else {\n        stdev = 0.5 * (averageDeviations[length / 2] + averageDeviations[length / 2 - 1]) / 0.6745;\n    }\n\n    return {\n        mean: mean,\n        stdev: stdev\n    };\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof (alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw 'Vectors do not have the same dimensions';\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    } else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    } else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof (eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = [].concat(values);\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof (standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n","'use strict';\n\nvar arrayStat = require('./array');\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\nexports.max = function max(matrix) {\n    var max = -Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] > max) max = matrix[i][j];\n        }\n    }\n    return max;\n};\n\nexports.min = function min(matrix) {\n    var min = Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] < min) min = matrix[i][j];\n        }\n    }\n    return min;\n};\n\nexports.minMax = function minMax(matrix) {\n    var min = Infinity;\n    var max = -Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] < min) min = matrix[i][j];\n            if (matrix[i][j] > max) max = matrix[i][j];\n        }\n    }\n    return {\n        min:min,\n        max:max\n    };\n};\n\nexports.entropy = function entropy(matrix, eps) {\n    if (typeof (eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n};\n\nexports.mean = function mean(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n};\n\nexports.sum = function sum(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theSum, i, j;\n\n    if (dimension === -1) {\n        theSum = [0];\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theSum[0] += matrix[i][j];\n            }\n        }\n    } else if (dimension === 0) {\n        theSum = new Array(cols);\n        for (j = 0; j < cols; j++) {\n            theSum[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theSum[j] += matrix[i][j];\n            }\n        }\n    } else if (dimension === 1) {\n        theSum = new Array(rows);\n        for (j = 0; j < rows; j++) {\n            theSum[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theSum[j] += matrix[j][i];\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theSum;\n};\n\nexports.product = function product(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theProduct, i, j;\n\n    if (dimension === -1) {\n        theProduct = [1];\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theProduct[0] *= matrix[i][j];\n            }\n        }\n    } else if (dimension === 0) {\n        theProduct = new Array(cols);\n        for (j = 0; j < cols; j++) {\n            theProduct[j] = 1;\n            for (i = 0; i < rows; i++) {\n                theProduct[j] *= matrix[i][j];\n            }\n        }\n    } else if (dimension === 1) {\n        theProduct = new Array(rows);\n        for (j = 0; j < rows; j++) {\n            theProduct[j] = 1;\n            for (i = 0; i < cols; i++) {\n                theProduct[j] *= matrix[j][i];\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theProduct;\n};\n\nexports.standardDeviation = function standardDeviation(matrix, means, unbiased) {\n    var vari = exports.variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n};\n\nexports.variance = function variance(matrix, means, unbiased) {\n    if (typeof (unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || exports.mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n};\n\nexports.median = function median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort(compareNumbers);\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n};\n\nexports.mode = function mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n};\n\nexports.skewness = function skewness(matrix, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var means = exports.mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n};\n\nexports.kurtosis = function kurtosis(matrix, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var means = exports.mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n};\n\nexports.standardError = function standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = exports.standardDeviation(matrix);\n    var l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n};\n\nexports.covariance = function covariance(matrix, dimension) {\n    return exports.scatter(matrix, undefined, dimension);\n};\n\nexports.scatter = function scatter(matrix, divisor, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof (divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = exports.mean(matrix, dimension);\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n};\n\nexports.correlation = function correlation(matrix) {\n    var means = exports.mean(matrix),\n        standardDeviations = exports.standardDeviation(matrix, true, means),\n        scores = exports.zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n};\n\nexports.zScores = function zScores(matrix, means, standardDeviations) {\n    means = means || exports.mean(matrix);\n    if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix, true, means);\n    return exports.standardize(exports.center(matrix, means, false), standardDeviations, true);\n};\n\nexports.center = function center(matrix, means, inPlace) {\n    means = means || exports.mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n};\n\nexports.standardize = function standardize(matrix, standardDeviations, inPlace) {\n    if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n};\n\nexports.weightedVariance = function weightedVariance(matrix, weights) {\n    var means = exports.mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n};\n\nexports.weightedMean = function weightedMean(matrix, weights, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = arrayStat.sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n};\n\nexports.weightedCovariance = function weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || exports.weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return exports.weightedScatter(matrix, weights, means, factor, dimension);\n};\n\nexports.weightedScatter = function weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || exports.weightedMean(matrix, weights, dimension);\n    if (typeof (factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n};\n","'use strict';\n\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n","'use strict';\n\nconst Stat = require('ml-stat').array;\n/**\n * Function that returns an array of points given 1D array as follows:\n *\n * [x1, y1, .. , x2, y2, ..]\n *\n * And receive the number of dimensions of each point.\n * @param array\n * @param dimensions\n * @returns {Array} - Array of points.\n */\nfunction coordArrayToPoints(array, dimensions) {\n    if(array.length % dimensions !== 0) {\n        throw new RangeError('Dimensions number must be accordance with the size of the array.');\n    }\n\n    var length = array.length / dimensions;\n    var pointsArr = new Array(length);\n\n    var k = 0;\n    for(var i = 0; i < array.length; i += dimensions) {\n        var point = new Array(dimensions);\n        for(var j = 0; j < dimensions; ++j) {\n            point[j] = array[i + j];\n        }\n\n        pointsArr[k] = point;\n        k++;\n    }\n\n    return pointsArr;\n}\n\n\n/**\n * Function that given an array as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * Returns an array as follows:\n * [[x1, x2, ..], [y1, y2, ..], [ .. ]]\n *\n * And receives the number of dimensions of each coordinate.\n * @param array\n * @param dimensions\n * @returns {Array} - Matrix of coordinates\n */\nfunction coordArrayToCoordMatrix(array, dimensions) {\n    if(array.length % dimensions !== 0) {\n        throw new RangeError('Dimensions number must be accordance with the size of the array.');\n    }\n\n    var coordinatesArray = new Array(dimensions);\n    var points = array.length / dimensions;\n    for (var i = 0; i < coordinatesArray.length; i++) {\n        coordinatesArray[i] = new Array(points);\n    }\n\n    for(i = 0; i < array.length; i += dimensions) {\n        for(var j = 0; j < dimensions; ++j) {\n            var currentPoint = Math.floor(i / dimensions);\n            coordinatesArray[j][currentPoint] = array[i + j];\n        }\n    }\n\n    return coordinatesArray;\n}\n\n/**\n * Function that receives a coordinate matrix as follows:\n * [[x1, x2, ..], [y1, y2, ..], [ .. ]]\n *\n * Returns an array of coordinates as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * @param coordMatrix\n * @returns {Array}\n */\nfunction coordMatrixToCoordArray(coordMatrix) {\n    var coodinatesArray = new Array(coordMatrix.length * coordMatrix[0].length);\n    var k = 0;\n    for(var i = 0; i < coordMatrix[0].length; ++i) {\n        for(var j = 0; j < coordMatrix.length; ++j) {\n            coodinatesArray[k] = coordMatrix[j][i];\n            ++k;\n        }\n    }\n\n    return coodinatesArray;\n}\n\n/**\n * Tranpose a matrix, this method is for coordMatrixToPoints and\n * pointsToCoordMatrix, that because only transposing the matrix\n * you can change your representation.\n *\n * @param matrix\n * @returns {Array}\n */\nfunction transpose(matrix) {\n    var resultMatrix = new Array(matrix[0].length);\n    for(var i = 0; i < resultMatrix.length; ++i) {\n        resultMatrix[i] = new Array(matrix.length);\n    }\n\n    for (i = 0; i < matrix.length; ++i) {\n        for(var j = 0; j < matrix[0].length; ++j) {\n            resultMatrix[j][i] = matrix[i][j];\n        }\n    }\n\n    return resultMatrix;\n}\n\n/**\n * Function that transform an array of points into a coordinates array\n * as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * @param points\n * @returns {Array}\n */\nfunction pointsToCoordArray(points) {\n    var coodinatesArray = new Array(points.length * points[0].length);\n    var k = 0;\n    for(var i = 0; i < points.length; ++i) {\n        for(var j = 0; j < points[0].length; ++j) {\n            coodinatesArray[k] = points[i][j];\n            ++k;\n        }\n    }\n\n    return coodinatesArray;\n}\n\n/**\n * Apply the dot product between the smaller vector and a subsets of the\n * largest one.\n *\n * @param firstVector\n * @param secondVector\n * @returns {Array} each dot product of size of the difference between the\n *                  larger and the smallest one.\n */\nfunction applyDotProduct(firstVector, secondVector) {\n    var largestVector, smallestVector;\n    if(firstVector.length <= secondVector.length) {\n        smallestVector = firstVector;\n        largestVector = secondVector;\n    } else {\n        smallestVector = secondVector;\n        largestVector = firstVector;\n    }\n\n    var difference = largestVector.length - smallestVector.length + 1;\n    var dotProductApplied = new Array(difference);\n\n    for (var i = 0; i < difference; ++i) {\n        var sum = 0;\n        for (var j = 0; j < smallestVector.length; ++j) {\n            sum += smallestVector[j] * largestVector[i + j];\n        }\n        dotProductApplied[i] = sum;\n    }\n\n    return dotProductApplied;\n}\n/**\n * To scale the input array between the specified min and max values. The operation is performed inplace\n * if the options.inplace is specified. If only one of the min or max parameters is specified, then the scaling\n * will multiply the input array by min/min(input) or max/max(input)\n * @param input\n * @param options\n * @returns {*}\n */\nfunction scale(input, options){\n    var y;\n    if(options.inPlace){\n        y = input;\n    }\n    else{\n        y = new Array(input.length);\n    }\n    const max = options.max;\n    const min = options.min;\n    if(typeof max === \"number\"){\n        if(typeof min === \"number\"){\n            var minMax = Stat.minMax(input);\n            var factor = (max - min)/(minMax.max-minMax.min);\n            for(var i=0;i< y.length;i++){\n                y[i]=(input[i]-minMax.min)*factor+min;\n            }\n        }\n        else{\n            var currentMin = Stat.max(input);\n            var factor = max/currentMin;\n            for(var i=0;i< y.length;i++){\n                y[i] = input[i]*factor;\n            }\n        }\n    }\n    else{\n        if(typeof min === \"number\"){\n            var currentMin = Stat.min(input);\n            var factor = min/currentMin;\n            for(var i=0;i< y.length;i++){\n                y[i] = input[i]*factor;\n            }\n        }\n    }\n    return y;\n}\n\nmodule.exports = {\n    coordArrayToPoints: coordArrayToPoints,\n    coordArrayToCoordMatrix: coordArrayToCoordMatrix,\n    coordMatrixToCoordArray: coordMatrixToCoordArray,\n    coordMatrixToPoints: transpose,\n    pointsToCoordArray: pointsToCoordArray,\n    pointsToCoordMatrix: transpose,\n    applyDotProduct: applyDotProduct,\n    scale:scale\n};\n\n","'use strict';\n\n/**\n *\n * Function that returns a Number array of equally spaced numberOfPoints\n * containing a representation of intensities of the spectra arguments x\n * and y.\n *\n * The options parameter contains an object in the following form:\n * from: starting point\n * to: last point\n * numberOfPoints: number of points between from and to\n * variant: \"slot\" or \"smooth\" - smooth is the default option\n *\n * The slot variant consist that each point in the new array is calculated\n * averaging the existing points between the slot that belongs to the current\n * value. The smooth variant is the same but takes the integral of the range\n * of the slot and divide by the step size between two points in the new array.\n *\n * @param x - sorted increasing x values\n * @param y\n * @param options\n * @returns {Array} new array with the equally spaced data.\n *\n */\nfunction getEquallySpacedData(x, y, options) {\n    if (x.length>1 && x[0]>x[1]) {\n        x=x.slice().reverse();\n        y=y.slice().reverse();\n    }\n\n    var xLength = x.length;\n    if(xLength !== y.length)\n        throw new RangeError(\"the x and y vector doesn't have the same size.\");\n\n    if (options === undefined) options = {};\n\n    var from = options.from === undefined ? x[0] : options.from\n    if (isNaN(from) || !isFinite(from)) {\n        throw new RangeError(\"'From' value must be a number\");\n    }\n    var to = options.to === undefined ? x[x.length - 1] : options.to;\n    if (isNaN(to) || !isFinite(to)) {\n        throw new RangeError(\"'To' value must be a number\");\n    }\n\n    var reverse = from > to;\n    if(reverse) {\n        var temp = from;\n        from = to;\n        to = temp;\n    }\n\n    var numberOfPoints = options.numberOfPoints === undefined ? 100 : options.numberOfPoints;\n    if (isNaN(numberOfPoints) || !isFinite(numberOfPoints)) {\n        throw new RangeError(\"'Number of points' value must be a number\");\n    }\n    if(numberOfPoints < 1)\n        throw new RangeError(\"the number of point must be higher than 1\");\n\n    var algorithm = options.variant === \"slot\" ? \"slot\" : \"smooth\"; // default value: smooth\n\n    var output = algorithm === \"slot\" ? getEquallySpacedSlot(x, y, from, to, numberOfPoints) : getEquallySpacedSmooth(x, y, from, to, numberOfPoints);\n\n    return reverse ? output.reverse() : output;\n}\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"smooth\"\n *\n * @param x\n * @param y\n * @param from - Initial point\n * @param to - Final point\n * @param numberOfPoints\n * @returns {Array} - Array of y's equally spaced with the variant \"smooth\"\n */\nfunction getEquallySpacedSmooth(x, y, from, to, numberOfPoints) {\n    var xLength = x.length;\n\n    var step = (to - from) / (numberOfPoints - 1);\n    var halfStep = step / 2;\n\n    var start = from - halfStep;\n    var output = new Array(numberOfPoints);\n\n    var initialOriginalStep = x[1] - x[0];\n    var lastOriginalStep = x[x.length - 1] - x[x.length - 2];\n\n    // Init main variables\n    var min = start;\n    var max = start + step;\n\n    var previousX = Number.MIN_VALUE;\n    var previousY = 0;\n    var nextX = x[0] - initialOriginalStep;\n    var nextY = 0;\n\n    var currentValue = 0;\n    var slope = 0;\n    var intercept = 0;\n    var sumAtMin = 0;\n    var sumAtMax = 0;\n\n    var i = 0; // index of input\n    var j = 0; // index of output\n\n    function getSlope(x0, y0, x1, y1) {\n        return (y1 - y0) / (x1 - x0);\n    }\n\n    main: while(true) {\n        while (nextX - max >= 0) {\n            // no overlap with original point, just consume current value\n            var add = integral(0, max - previousX, slope, previousY);\n            sumAtMax = currentValue + add;\n\n            output[j] = (sumAtMax - sumAtMin) / step;\n            j++;\n\n            if (j === numberOfPoints)\n                break main;\n\n            min = max;\n            max += step;\n            sumAtMin = sumAtMax;\n        }\n\n        if(previousX <= min && min <= nextX) {\n            add = integral(0, min - previousX, slope, previousY);\n            sumAtMin = currentValue + add;\n        }\n\n        currentValue += integral(previousX, nextX, slope, intercept);\n\n        previousX = nextX;\n        previousY = nextY;\n\n        if (i < xLength) {\n            nextX = x[i];\n            nextY = y[i];\n            i++;\n        } else if (i === xLength) {\n            nextX += lastOriginalStep;\n            nextY = 0;\n        }\n        // updating parameters\n        slope = getSlope(previousX, previousY, nextX, nextY);\n        intercept = -slope*previousX + previousY;\n    }\n\n    return output;\n}\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"slot\"\n *\n * @param x\n * @param y\n * @param from - Initial point\n * @param to - Final point\n * @param numberOfPoints\n * @returns {Array} - Array of y's equally spaced with the variant \"slot\"\n */\nfunction getEquallySpacedSlot(x, y, from, to, numberOfPoints) {\n    var xLength = x.length;\n\n    var step = (to - from) / (numberOfPoints - 1);\n    var halfStep = step / 2;\n    var lastStep = x[x.length - 1] - x[x.length - 2];\n\n    var start = from - halfStep;\n    var output = new Array(numberOfPoints);\n\n    // Init main variables\n    var min = start;\n    var max = start + step;\n\n    var previousX = -Number.MAX_VALUE;\n    var previousY = 0;\n    var nextX = x[0];\n    var nextY = y[0];\n    var frontOutsideSpectra = 0;\n    var backOutsideSpectra = true;\n\n    var currentValue = 0;\n\n    // for slot algorithm\n    var currentPoints = 0;\n\n    var i = 1; // index of input\n    var j = 0; // index of output\n\n    main: while(true) {\n        if (previousX>=nextX) throw (new Error('x must be an increasing serie'));\n        while (previousX - max > 0) {\n            // no overlap with original point, just consume current value\n            if(backOutsideSpectra) {\n                currentPoints++;\n                backOutsideSpectra = false;\n            }\n\n            output[j] = currentPoints <= 0 ? 0 : currentValue / currentPoints;\n            j++;\n\n            if (j === numberOfPoints)\n                break main;\n\n            min = max;\n            max += step;\n            currentValue = 0;\n            currentPoints = 0;\n        }\n\n        if(previousX > min) {\n            currentValue += previousY;\n            currentPoints++;\n        }\n\n        if(previousX === -Number.MAX_VALUE || frontOutsideSpectra > 1)\n            currentPoints--;\n\n        previousX = nextX;\n        previousY = nextY;\n\n        if (i < xLength) {\n            nextX = x[i];\n            nextY = y[i];\n            i++;\n        } else {\n            nextX += lastStep;\n            nextY = 0;\n            frontOutsideSpectra++;\n        }\n    }\n\n    return output;\n}\n/**\n * Function that calculates the integral of the line between two\n * x-coordinates, given the slope and intercept of the line.\n *\n * @param x0\n * @param x1\n * @param slope\n * @param intercept\n * @returns {number} integral value.\n */\nfunction integral(x0, x1, slope, intercept) {\n    return (0.5 * slope * x1 * x1 + intercept * x1) - (0.5 * slope * x0 * x0 + intercept * x0);\n}\n\nexports.getEquallySpacedData = getEquallySpacedData;\nexports.integral = integral;","'use strict';\n\nexports.SNV = SNV;\nvar Stat = require('ml-stat').array;\n\n/**\n * Function that applies the standard normal variate (SNV) to an array of values.\n *\n * @param data - Array of values.\n * @returns {Array} - applied the SNV.\n */\nfunction SNV(data) {\n    var mean = Stat.mean(data);\n    var std = Stat.standardDeviation(data);\n    var result = data.slice();\n    for (var i = 0; i < data.length; i++) {\n        result[i] = (result[i] - mean) / std;\n    }\n    return result;\n}\n","module.exports = exports = require('./ArrayUtils');\n\n\nexports.getEquallySpacedData = require('./getEquallySpaced').getEquallySpacedData;\nexports.SNV = require('./snv').SNV;\n","'use strict';\n\nvar Matrix = require('./matrix');\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkRowIndex = function checkRowIndex(matrix, index, outer) {\n    var max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Row index out of range');\n    }\n};\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkColumnIndex = function checkColumnIndex(matrix, index, outer) {\n    var max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Column index out of range');\n    }\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkRowVector = function checkRowVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.columns) {\n        throw new RangeError('vector size must be the same as the number of columns');\n    }\n    return vector;\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkColumnVector = function checkColumnVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.rows) {\n        throw new RangeError('vector size must be the same as the number of rows');\n    }\n    return vector;\n};\n\nexports.checkIndices = function checkIndices(matrix, rowIndices, columnIndices) {\n    var rowOut = rowIndices.some(r => {\n        return r < 0 || r >= matrix.rows;\n\n    });\n\n    var columnOut = columnIndices.some(c => {\n        return c < 0 || c >= matrix.columns;\n    });\n\n    if (rowOut || columnOut) {\n        throw new RangeError('Indices are out of range');\n    }\n\n    if (typeof rowIndices !== 'object' || typeof columnIndices !== 'object') {\n        throw new TypeError('Unexpected type for row/column indices');\n    }\n    if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n    if (!Array.isArray(columnIndices)) rowIndices = Array.from(columnIndices);\n\n    return {\n        row: rowIndices,\n        column: columnIndices\n    };\n};\n\nexports.checkRange = function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new TypeError('Invalid argument type');\n    var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {\n        return typeof arg !== 'number';\n    });\n    if (notAllNumbers) throw new TypeError('Invalid argument type');\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n        throw new RangeError('Submatrix indices are out of range');\n    }\n};\n\nexports.getRange = function getRange(from, to) {\n    var arr = new Array(to - from + 1);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = from + i;\n    }\n    return arr;\n};\n\nexports.sumByRow = function sumByRow(matrix) {\n    var sum = Matrix.Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumByColumn = function sumByColumn(matrix) {\n    var sum = Matrix.Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumAll = function sumAll(matrix) {\n    var v = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n            v += matrix.get(i, j);\n        }\n    }\n    return v;\n};\n","'use strict';\n\nvar abstractMatrix = require('../abstractMatrix');\nvar Matrix = require('../matrix');\n\nclass BaseView extends abstractMatrix() {\n    constructor(matrix, rows, columns) {\n        super();\n        this.matrix = matrix;\n        this.rows = rows;\n        this.columns = columns;\n    }\n\n    static get [Symbol.species]() {\n        return Matrix.Matrix;\n    }\n}\n\nmodule.exports = BaseView;\n","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixTransposeView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.columns, matrix.rows);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(columnIndex, rowIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(columnIndex, rowIndex);\n    }\n}\n\nmodule.exports = MatrixTransposeView;\n","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixRowView extends BaseView {\n    constructor(matrix, row) {\n        super(matrix, 1, matrix.columns);\n        this.row = row;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.row, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.row, columnIndex);\n    }\n}\n\nmodule.exports = MatrixRowView;\n","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSubView extends BaseView {\n    constructor(matrix, startRow, endRow, startColumn, endColumn) {\n        util.checkRange(matrix, startRow, endRow, startColumn, endColumn);\n        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n        this.startRow = startRow;\n        this.startColumn = startColumn;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n    }\n}\n\nmodule.exports = MatrixSubView;\n","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSelectionView extends BaseView {\n    constructor(matrix, rowIndices, columnIndices) {\n        var indices = util.checkIndices(matrix, rowIndices, columnIndices);\n        super(matrix, indices.row.length, indices.column.length);\n        this.rowIndices = indices.row;\n        this.columnIndices = indices.column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n    }\n}\n\nmodule.exports = MatrixSelectionView;\n","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixColumnView extends BaseView {\n    constructor(matrix, column) {\n        super(matrix, matrix.rows, 1);\n        this.column = column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.column, value);\n        return this;\n    }\n\n    get(rowIndex) {\n        return this.matrix.get(rowIndex, this.column);\n    }\n}\n\nmodule.exports = MatrixColumnView;\n","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipRowView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n    }\n}\n\nmodule.exports = MatrixFlipRowView;\n","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipColumnView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n    }\n}\n\nmodule.exports = MatrixFlipColumnView;\n","'use strict';\n\nmodule.exports = abstractMatrix;\n\nvar LuDecomposition = require('./dc/lu');\nvar SvDecomposition = require('./dc/svd');\nvar arrayUtils = require('ml-array-utils');\nvar util = require('./util');\nvar MatrixTransposeView = require('./views/transpose');\nvar MatrixRowView = require('./views/row');\nvar MatrixSubView = require('./views/sub');\nvar MatrixSelectionView = require('./views/selection');\nvar MatrixColumnView = require('./views/column');\nvar MatrixFlipRowView = require('./views/flipRow');\nvar MatrixFlipColumnView = require('./views/flipColumn');\n\nfunction abstractMatrix(superCtor) {\n    if (superCtor === undefined) superCtor = Object;\n\n    /**\n     * Real matrix\n     * @class Matrix\n     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n     * 2D array containing the data or Matrix instance to clone\n     * @param {number} [nColumns] - Number of columns of the new matrix\n     */\n    class Matrix extends superCtor {\n        static get [Symbol.species]() {\n            return this;\n        }\n\n        /**\n         * Constructs a Matrix with the chosen dimensions from a 1D array\n         * @param {number} newRows - Number of rows\n         * @param {number} newColumns - Number of columns\n         * @param {Array} newData - A 1D array containing data for the matrix\n         * @return {Matrix} - The new matrix\n         */\n        static from1DArray(newRows, newColumns, newData) {\n            var length = newRows * newColumns;\n            if (length !== newData.length) {\n                throw new RangeError('Data length does not match given dimensions');\n            }\n            var newMatrix = new this(newRows, newColumns);\n            for (var row = 0; row < newRows; row++) {\n                for (var column = 0; column < newColumns; column++) {\n                    newMatrix.set(row, column, newData[row * newColumns + column]);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static rowVector(newData) {\n            var vector = new this(1, newData.length);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(0, i, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static columnVector(newData) {\n            var vector = new this(newData.length, 1);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(i, 0, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static empty(rows, columns) {\n            return new this(rows, columns);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static zeros(rows, columns) {\n            return this.empty(rows, columns).fill(0);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static ones(rows, columns) {\n            return this.empty(rows, columns).fill(1);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static rand(rows, columns, rng) {\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    matrix.set(i, j, rng());\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static randInt(rows, columns, maxValue, rng) {\n            if (maxValue === undefined) maxValue = 1000;\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = Math.floor(rng() * maxValue);\n                    matrix.set(i, j, value);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n        static eye(rows, columns, value) {\n            if (columns === undefined) columns = rows;\n            if (value === undefined) value = 1;\n            var min = Math.min(rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, value);\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n        static diag(data, rows, columns) {\n            var l = data.length;\n            if (rows === undefined) rows = l;\n            if (columns === undefined) columns = rows;\n            var min = Math.min(l, rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, data[i]);\n            }\n            return matrix;\n        }\n\n        /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static min(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static max(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n        static checkMatrix(value) {\n            return Matrix.isMatrix(value) ? value : new this(value);\n        }\n\n        /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n        static isMatrix(value) {\n            return (value != null) && (value.klass === 'Matrix');\n        }\n\n        /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n        get size() {\n            return this.rows * this.columns;\n        }\n\n        /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n        apply(callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('callback must be a function');\n            }\n            var ii = this.rows;\n            var jj = this.columns;\n            for (var i = 0; i < ii; i++) {\n                for (var j = 0; j < jj; j++) {\n                    callback.call(this, i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n        to1DArray() {\n            var array = new Array(this.size);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    array[i * this.columns + j] = this.get(i, j);\n                }\n            }\n            return array;\n        }\n\n        /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n        to2DArray() {\n            var copy = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                copy[i] = new Array(this.columns);\n                for (var j = 0; j < this.columns; j++) {\n                    copy[i][j] = this.get(i, j);\n                }\n            }\n            return copy;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row\n         */\n        isRowVector() {\n            return this.rows === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one column\n         */\n        isColumnVector() {\n            return this.columns === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n        isVector() {\n            return (this.rows === 1) || (this.columns === 1);\n        }\n\n        /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n        isSquare() {\n            return this.rows === this.columns;\n        }\n\n        /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n        isSymmetric() {\n            if (this.isSquare()) {\n                for (var i = 0; i < this.rows; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        if (this.get(i, j) !== this.get(j, i)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n        set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n            throw new Error('set method is unimplemented');\n        }\n\n        /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n        get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n            throw new Error('get method is unimplemented');\n        }\n\n        /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n        repeat(rowRep, colRep) {\n            rowRep = rowRep || 1;\n            colRep = colRep || 1;\n            var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n            for (var i = 0; i < rowRep; i++) {\n                for (var j = 0; j < colRep; j++) {\n                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n        fill(value) {\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, value);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n        neg() {\n            return this.mulS(-1);\n        }\n\n        /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n        getRow(index) {\n            util.checkRowIndex(this, index);\n            var row = new Array(this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                row[i] = this.get(index, i);\n            }\n            return row;\n        }\n\n        /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n        getRowVector(index) {\n            return this.constructor.rowVector(this.getRow(index));\n        }\n\n        /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setRow(index, array) {\n            util.checkRowIndex(this, index);\n            array = util.checkRowVector(this, array);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n        swapRows(row1, row2) {\n            util.checkRowIndex(this, row1);\n            util.checkRowIndex(this, row2);\n            for (var i = 0; i < this.columns; i++) {\n                var temp = this.get(row1, i);\n                this.set(row1, i, this.get(row2, i));\n                this.set(row2, i, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n        getColumn(index) {\n            util.checkColumnIndex(this, index);\n            var column = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                column[i] = this.get(i, index);\n            }\n            return column;\n        }\n\n        /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n        getColumnVector(index) {\n            return this.constructor.columnVector(this.getColumn(index));\n        }\n\n        /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setColumn(index, array) {\n            util.checkColumnIndex(this, index);\n            array = util.checkColumnVector(this, array);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n        swapColumns(column1, column2) {\n            util.checkColumnIndex(this, column1);\n            util.checkColumnIndex(this, column2);\n            for (var i = 0; i < this.rows; i++) {\n                var temp = this.get(i, column1);\n                this.set(i, column1, this.get(i, column2));\n                this.set(i, column2, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulRow(index, value) {\n            util.checkRowIndex(this, index);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, this.get(index, i) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulColumn(index, value) {\n            util.checkColumnIndex(this, index);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, this.get(i, index) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n        max() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n        maxIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n        min() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n        minIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        maxRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        maxRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        minRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        minRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        maxColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        maxColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        minColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        minColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n        diag() {\n            var min = Math.min(this.rows, this.columns);\n            var diag = new Array(min);\n            for (var i = 0; i < min; i++) {\n                diag[i] = this.get(i, i);\n            }\n            return diag;\n        }\n\n        /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n        sum(by) {\n            switch (by) {\n                case 'row':\n                    return util.sumByRow(this);\n                case 'column':\n                    return util.sumByColumn(this);\n                default:\n                    return util.sumAll(this);\n            }\n        }\n\n        /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n        mean() {\n            return this.sum() / this.size;\n        }\n\n        /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n        prod() {\n            var prod = 1;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    prod *= this.get(i, j);\n                }\n            }\n            return prod;\n        }\n\n        /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n        cumulativeSum() {\n            var sum = 0;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    sum += this.get(i, j);\n                    this.set(i, j, sum);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n        dot(vector2) {\n            if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n            var vector1 = this.to1DArray();\n            if (vector1.length !== vector2.length) {\n                throw new RangeError('vectors do not have the same size');\n            }\n            var dot = 0;\n            for (var i = 0; i < vector1.length; i++) {\n                dot += vector1[i] * vector2[i];\n            }\n            return dot;\n        }\n\n        /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        mmul(other) {\n            other = this.constructor.checkMatrix(other);\n            if (this.columns !== other.rows) {\n                // eslint-disable-next-line no-console\n                console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n            }\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.columns;\n\n            var result = new this.constructor[Symbol.species](m, p);\n\n            var Bcolj = new Array(n);\n            for (var j = 0; j < p; j++) {\n                for (var k = 0; k < n; k++) {\n                    Bcolj[k] = other.get(k, j);\n                }\n\n                for (var i = 0; i < m; i++) {\n                    var s = 0;\n                    for (k = 0; k < n; k++) {\n                        s += this.get(i, k) * Bcolj[k];\n                    }\n\n                    result.set(i, j, s);\n                }\n            }\n            return result;\n        }\n\n        strassen2x2(other) {\n            var result = new this.constructor[Symbol.species](2, 2);\n            const a11 = this.get(0, 0);\n            const b11 = other.get(0, 0);\n            const a12 = this.get(0, 1);\n            const b12 = other.get(0, 1);\n            const a21 = this.get(1, 0);\n            const b21 = other.get(1, 0);\n            const a22 = this.get(1, 1);\n            const b22 = other.get(1, 1);\n\n            // Compute intermediate values.\n            const m1 = (a11 + a22) * (b11 + b22);\n            const m2 = (a21 + a22) * b11;\n            const m3 = a11 * (b12 - b22);\n            const m4 = a22 * (b21 - b11);\n            const m5 = (a11 + a12) * b22;\n            const m6 = (a21 - a11) * (b11 + b12);\n            const m7 = (a12 - a22) * (b21 + b22);\n\n            // Combine intermediate values into the output.\n            const c00 = m1 + m4 - m5 + m7;\n            const c01 = m3 + m5;\n            const c10 = m2 + m4;\n            const c11 = m1 - m2 + m3 + m6;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            return result;\n        }\n\n        strassen3x3(other) {\n            var result = new this.constructor[Symbol.species](3, 3);\n\n            const a00 = this.get(0, 0);\n            const a01 = this.get(0, 1);\n            const a02 = this.get(0, 2);\n            const a10 = this.get(1, 0);\n            const a11 = this.get(1, 1);\n            const a12 = this.get(1, 2);\n            const a20 = this.get(2, 0);\n            const a21 = this.get(2, 1);\n            const a22 = this.get(2, 2);\n\n            const b00 = other.get(0, 0);\n            const b01 = other.get(0, 1);\n            const b02 = other.get(0, 2);\n            const b10 = other.get(1, 0);\n            const b11 = other.get(1, 1);\n            const b12 = other.get(1, 2);\n            const b20 = other.get(2, 0);\n            const b21 = other.get(2, 1);\n            const b22 = other.get(2, 2);\n\n            const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n            const m2 = (a00 - a10) * (-b01 + b11);\n            const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n            const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n            const m5 = (a10 + a11) * (-b00 + b01);\n            const m6 = a00 * b00;\n            const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n            const m8 = (-a00 + a20) * (b02 - b12);\n            const m9 = (a20 + a21) * (-b00 + b02);\n            const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n            const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n            const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n            const m13 = (a02 - a22) * (b11 - b21);\n            const m14 = a02 * b20;\n            const m15 = (a21 + a22) * (-b20 + b21);\n            const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n            const m17 = (a02 - a12) * (b12 - b22);\n            const m18 = (a11 + a12) * (-b20 + b22);\n            const m19 = a01 * b10;\n            const m20 = a12 * b21;\n            const m21 = a10 * b02;\n            const m22 = a20 * b01;\n            const m23 = a22 * b22;\n\n            const c00 = m6 + m14 + m19;\n            const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n            const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n            const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n            const c11 = m2 + m4 + m5 + m6 + m20;\n            const c12 = m14 + m16 + m17 + m18 + m21;\n            const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n            const c21 = m12 + m13 + m14 + m15 + m22;\n            const c22 = m6 + m7 + m8 + m9 + m23;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(0, 2, c02);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            result.set(1, 2, c12);\n            result.set(2, 0, c20);\n            result.set(2, 1, c21);\n            result.set(2, 2, c22);\n            return result;\n        }\n\n        /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n        mmulStrassen(y) {\n            var x = this.clone();\n            var r1 = x.rows;\n            var c1 = x.columns;\n            var r2 = y.rows;\n            var c2 = y.columns;\n            if (c1 !== r2) {\n                // eslint-disable-next-line no-console\n                console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n            }\n\n            // Put a matrix into the top left of a matrix of zeros.\n            // `rows` and `cols` are the dimensions of the output matrix.\n            function embed(mat, rows, cols) {\n                var r = mat.rows;\n                var c = mat.columns;\n                if ((r === rows) && (c === cols)) {\n                    return mat;\n                } else {\n                    var resultat = Matrix.zeros(rows, cols);\n                    resultat = resultat.setSubMatrix(mat, 0, 0);\n                    return resultat;\n                }\n            }\n\n\n            // Make sure both matrices are the same size.\n            // This is exclusively for simplicity:\n            // this algorithm can be implemented with matrices of different sizes.\n\n            var r = Math.max(r1, r2);\n            var c = Math.max(c1, c2);\n            x = embed(x, r, c);\n            y = embed(y, r, c);\n\n            // Our recursive multiplication function.\n            function blockMult(a, b, rows, cols) {\n                // For small matrices, resort to naive multiplication.\n                if (rows <= 512 || cols <= 512) {\n                    return a.mmul(b); // a is equivalent to this\n                }\n\n                // Apply dynamic padding.\n                if ((rows % 2 === 1) && (cols % 2 === 1)) {\n                    a = embed(a, rows + 1, cols + 1);\n                    b = embed(b, rows + 1, cols + 1);\n                } else if (rows % 2 === 1) {\n                    a = embed(a, rows + 1, cols);\n                    b = embed(b, rows + 1, cols);\n                } else if (cols % 2 === 1) {\n                    a = embed(a, rows, cols + 1);\n                    b = embed(b, rows, cols + 1);\n                }\n\n                var halfRows = parseInt(a.rows / 2);\n                var halfCols = parseInt(a.columns / 2);\n                // Subdivide input matrices.\n                var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n                var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n                var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n                var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n                var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n                var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n                var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n                var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n                // Compute intermediate values.\n                var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n                var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n                var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n                var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n                var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n                var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n                var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n                // Combine intermediate values into the output.\n                var c11 = Matrix.add(m1, m4);\n                c11.sub(m5);\n                c11.add(m7);\n                var c12 = Matrix.add(m3, m5);\n                var c21 = Matrix.add(m2, m4);\n                var c22 = Matrix.sub(m1, m2);\n                c22.add(m3);\n                c22.add(m6);\n\n                //Crop output to the desired size (undo dynamic padding).\n                var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n                resultat = resultat.setSubMatrix(c11, 0, 0);\n                resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n                resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n                resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n                return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n            }\n            return blockMult(x, y, r, c);\n        }\n\n        /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n        scaleRows(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.rows; i++) {\n                var scaled = arrayUtils.scale(this.getRow(i), {min, max});\n                newMatrix.setRow(i, scaled);\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n        scaleColumns(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                var scaled = arrayUtils.scale(this.getColumn(i), {\n                    min: min,\n                    max: max\n                });\n                newMatrix.setColumn(i, scaled);\n            }\n            return newMatrix;\n        }\n\n\n        /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        kroneckerProduct(other) {\n            other = this.constructor.checkMatrix(other);\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.rows;\n            var q = other.columns;\n\n            var result = new this.constructor[Symbol.species](m * p, n * q);\n            for (var i = 0; i < m; i++) {\n                for (var j = 0; j < n; j++) {\n                    for (var k = 0; k < p; k++) {\n                        for (var l = 0; l < q; l++) {\n                            result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n        transpose() {\n            var result = new this.constructor[Symbol.species](this.columns, this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    result.set(j, i, this.get(i, j));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortRows(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.rows; i++) {\n                this.setRow(i, this.getRow(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortColumns(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.columns; i++) {\n                this.setColumn(i, this.getColumn(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n        subMatrix(startRow, endRow, startColumn, endColumn) {\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n            for (var i = startRow; i <= endRow; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n        subMatrixRow(indices, startColumn, endColumn) {\n            if (startColumn === undefined) startColumn = 0;\n            if (endColumn === undefined) endColumn = this.columns - 1;\n            if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.rows) {\n                        throw new RangeError('Row index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n        subMatrixColumn(indices, startRow, endRow) {\n            if (startRow === undefined) startRow = 0;\n            if (endRow === undefined) endRow = this.rows - 1;\n            if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startRow; j <= endRow; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.columns) {\n                        throw new RangeError('Column index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n        setSubMatrix(matrix, startRow, startColumn) {\n            matrix = this.constructor.checkMatrix(matrix);\n            var endRow = startRow + matrix.rows - 1;\n            var endColumn = startColumn + matrix.columns - 1;\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            for (var i = 0; i < matrix.rows; i++) {\n                for (var j = 0; j < matrix.columns; j++) {\n                    this[startRow + i][startColumn + j] = matrix.get(i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n        selection(rowIndices, columnIndices) {\n            var indices = util.checkIndices(this, rowIndices, columnIndices);\n            var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n            for (var i = 0; i < indices.row.length; i++) {\n                var rowIndex = indices.row[i];\n                for (var j = 0; j < indices.column.length; j++) {\n                    var columnIndex = indices.column[j];\n                    newMatrix[i][j] = this.get(rowIndex, columnIndex);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n        trace() {\n            var min = Math.min(this.rows, this.columns);\n            var trace = 0;\n            for (var i = 0; i < min; i++) {\n                trace += this.get(i, i);\n            }\n            return trace;\n        }\n\n        /*\n         Matrix views\n         */\n\n        /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n        transposeView() {\n            return new MatrixTransposeView(this);\n        }\n\n        /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n        rowView(row) {\n            util.checkRowIndex(this, row);\n            return new MatrixRowView(this, row);\n        }\n\n        /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n        columnView(column) {\n            util.checkColumnIndex(this, column);\n            return new MatrixColumnView(this, column);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n        flipRowView() {\n            return new MatrixFlipRowView(this);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n        flipColumnView() {\n            return new MatrixFlipColumnView(this);\n        }\n\n        /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n        subMatrixView(startRow, endRow, startColumn, endColumn) {\n            return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n        }\n\n        /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n        selectionView(rowIndices, columnIndices) {\n            return new MatrixSelectionView(this, rowIndices, columnIndices);\n        }\n\n\n        /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n        det() {\n            if (this.isSquare()) {\n                var a, b, c, d;\n                if (this.columns === 2) {\n                    // 2 x 2 matrix\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(1, 0);\n                    d = this.get(1, 1);\n\n                    return a * d - (b * c);\n                } else if (this.columns === 3) {\n                    // 3 x 3 matrix\n                    var subMatrix0, subMatrix1, subMatrix2;\n                    subMatrix0 = this.selectionView([1, 2], [1, 2]);\n                    subMatrix1 = this.selectionView([1, 2], [0, 2]);\n                    subMatrix2 = this.selectionView([1, 2], [0, 1]);\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(0, 2);\n\n                    return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n                } else {\n                    // general purpose determinant using the LU decomposition\n                    return new LuDecomposition(this).determinant;\n                }\n\n            } else {\n                throw Error('Determinant can only be calculated for a square matrix.');\n            }\n        }\n\n        /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n        pseudoInverse(threshold) {\n            if (threshold === undefined) threshold = Number.EPSILON;\n            var svdSolution = new SvDecomposition(this, {autoTranspose: true});\n\n            var U = svdSolution.leftSingularVectors;\n            var V = svdSolution.rightSingularVectors;\n            var s = svdSolution.diagonal;\n\n            for (var i = 0; i < s.length; i++) {\n                if (Math.abs(s[i]) > threshold) {\n                    s[i] = 1.0 / s[i];\n                } else {\n                    s[i] = 0.0;\n                }\n            }\n\n            // convert list to diagonal\n            s = this.constructor[Symbol.species].diag(s);\n            return V.mmul(s.mmul(U.transposeView()));\n        }\n    }\n\n    Matrix.prototype.klass = 'Matrix';\n\n    /**\n     * @private\n     * Check that two matrices have the same dimensions\n     * @param {Matrix} matrix\n     * @param {Matrix} otherMatrix\n     */\n    function checkDimensions(matrix, otherMatrix) { // eslint-disable-line no-unused-vars\n        if (matrix.rows !== otherMatrix.rows ||\n            matrix.columns !== otherMatrix.columns) {\n            throw new RangeError('Matrices dimensions must be equal');\n        }\n    }\n\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n\n    /*\n     Synonyms\n     */\n\n    Matrix.random = Matrix.rand;\n    Matrix.diagonal = Matrix.diag;\n    Matrix.prototype.diagonal = Matrix.prototype.diag;\n    Matrix.identity = Matrix.eye;\n    Matrix.prototype.negate = Matrix.prototype.neg;\n    Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n    Matrix.prototype.determinant = Matrix.prototype.det;\n\n    /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n    var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n    var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n    var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n    var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n    var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var staticMethodWithOneArg = staticMethodWithArgs;\n\n    var operators = [\n        // Arithmetic operators\n        ['+', 'add'],\n        ['-', 'sub', 'subtract'],\n        ['*', 'mul', 'multiply'],\n        ['/', 'div', 'divide'],\n        ['%', 'mod', 'modulus'],\n        // Bitwise operators\n        ['&', 'and'],\n        ['|', 'or'],\n        ['^', 'xor'],\n        ['<<', 'leftShift'],\n        ['>>', 'signPropagatingRightShift'],\n        ['>>>', 'rightShift', 'zeroFillRightShift']\n    ];\n\n    var i;\n\n    for (var operator of operators) {\n        var inplaceOp = eval(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));\n        var inplaceOpS = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));\n        var inplaceOpM = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));\n        var staticOp = eval(fillTemplateFunction(staticOperator, {name: operator[1]}));\n        for (i = 1; i < operator.length; i++) {\n            Matrix.prototype[operator[i]] = inplaceOp;\n            Matrix.prototype[operator[i] + 'S'] = inplaceOpS;\n            Matrix.prototype[operator[i] + 'M'] = inplaceOpM;\n            Matrix[operator[i]] = staticOp;\n        }\n    }\n\n    var methods = [\n        ['~', 'not']\n    ];\n\n    [\n        'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n        'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n        'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n    ].forEach(function (mathMethod) {\n        methods.push(['Math.' + mathMethod, mathMethod]);\n    });\n\n    for (var method of methods) {\n        var inplaceMeth = eval(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));\n        var staticMeth = eval(fillTemplateFunction(staticMethod, {name: method[1]}));\n        for (i = 1; i < method.length; i++) {\n            Matrix.prototype[method[i]] = inplaceMeth;\n            Matrix[method[i]] = staticMeth;\n        }\n    }\n\n    var methodsWithArgs = [\n        ['Math.pow', 1, 'pow']\n    ];\n\n    for (var methodWithArg of methodsWithArgs) {\n        var args = 'arg0';\n        for (i = 1; i < methodWithArg[1]; i++) {\n            args += `, arg${i}`;\n        }\n        if (methodWithArg[1] !== 1) {\n            var inplaceMethWithArgs = eval(fillTemplateFunction(inplaceMethodWithArgs, {\n                name: methodWithArg[2],\n                method: methodWithArg[0],\n                args: args\n            }));\n            var staticMethWithArgs = eval(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n                Matrix[methodWithArg[i]] = staticMethWithArgs;\n            }\n        } else {\n            var tmplVar = {\n                name: methodWithArg[2],\n                args: args,\n                method: methodWithArg[0]\n            };\n            var inplaceMethod2 = eval(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n            var inplaceMethodS = eval(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n            var inplaceMethodM = eval(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n            var staticMethod2 = eval(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n                Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;\n                Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;\n                Matrix[methodWithArg[i]] = staticMethod2;\n            }\n        }\n    }\n\n    function fillTemplateFunction(template, values) {\n        for (var value in values) {\n            template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);\n        }\n        return template;\n    }\n\n    return Matrix;\n}\n","'use strict';\n\nrequire('./symbol-species');\nvar abstractMatrix = require('./abstractMatrix');\nvar util = require('./util');\n\nclass Matrix extends abstractMatrix(Array) {\n    constructor(nRows, nColumns) {\n        var i;\n        if (arguments.length === 1 && typeof nRows === 'number') {\n            return new Array(nRows);\n        }\n        if (Matrix.isMatrix(nRows)) {\n            return nRows.clone();\n        } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix\n            super(nRows);\n            if (Number.isInteger(nColumns) && nColumns > 0) {\n                for (i = 0; i < nRows; i++) {\n                    this[i] = new Array(nColumns);\n                }\n            } else {\n                throw new TypeError('nColumns must be a positive integer');\n            }\n        } else if (Array.isArray(nRows)) { // Copy the values from the 2D array\n            const matrix = nRows;\n            nRows = matrix.length;\n            nColumns = matrix[0].length;\n            if (typeof nColumns !== 'number' || nColumns === 0) {\n                throw new TypeError('Data must be a 2D array with at least one element');\n            }\n            super(nRows);\n            for (i = 0; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                }\n                this[i] = [].concat(matrix[i]);\n            }\n        } else {\n            throw new TypeError('First argument must be a positive number or an array');\n        }\n        this.rows = nRows;\n        this.columns = nColumns;\n        return this;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this[rowIndex][columnIndex] = value;\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this[rowIndex][columnIndex];\n    }\n\n    /**\n     * Creates an exact and independent copy of the matrix\n     * @return {Matrix}\n     */\n    clone() {\n        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                newMatrix.set(row, column, this.get(row, column));\n            }\n        }\n        return newMatrix;\n    }\n\n    /**\n     * Removes a row from the given index\n     * @param {number} index - Row index\n     * @return {Matrix} this\n     */\n    removeRow(index) {\n        util.checkRowIndex(this, index);\n        if (this.rows === 1) {\n            throw new RangeError('A matrix cannot have less than one row');\n        }\n        this.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a row at the given index\n     * @param {number} [index = this.rows] - Row index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        util.checkRowIndex(this, index, true);\n        array = util.checkRowVector(this, array, true);\n        this.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n\n    /**\n     * Removes a column from the given index\n     * @param {number} index - Column index\n     * @return {Matrix} this\n     */\n    removeColumn(index) {\n        util.checkColumnIndex(this, index);\n        if (this.columns === 1) {\n            throw new RangeError('A matrix cannot have less than one column');\n        }\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 1);\n        }\n        this.columns -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a column at the given index\n     * @param {number} [index = this.columns] - Column index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        util.checkColumnIndex(this, index, true);\n        array = util.checkColumnVector(this, array);\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 0, array[i]);\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n\nexports.Matrix = Matrix;\nMatrix.abstractMatrix = abstractMatrix;\n","'use strict';\n\nconst Matrix = require('../matrix').Matrix;\nconst util = require('./util');\nconst hypotenuse = util.hypotenuse;\nconst getFilled2DArray = util.getFilled2DArray;\n\nconst defaultOptions = {\n    assumeSymmetric: false\n};\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix, options);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = getFilled2DArray(n, n, 0),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    var isSymmetric = false;\n    if (options.assumeSymmetric) {\n        isSymmetric = true;\n    } else {\n        isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value.get(i, j);\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    } else {\n        var H = getFilled2DArray(n, n, 0),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value.get(i, j);\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            } else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m) {\n            throw new Error('Matrix row dimensions must agree');\n        }\n        if (!this.isFullRank()) {\n            throw new Error('Matrix is rank deficient');\n        }\n\n        var count = value.columns;\n        var X = value.clone();\n        var n = qr.columns;\n        var i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularMatrix() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalMatrix() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric()) {\n        throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get lowerTriangularMatrix() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n","'use strict';\n\nvar Matrix = require('./matrix').Matrix;\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.inverse = Matrix.inv = inverse;\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.prototype.inverse = Matrix.prototype.inv = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    leftHandSide = Matrix.checkMatrix(leftHandSide);\n    rightHandSide = Matrix.checkMatrix(rightHandSide);\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.solve = solve;\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n","'use strict';\n\nmodule.exports = require('./matrix').Matrix;\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n","/**\n * Created by acastillo on 8/24/15.\n */\n/**\n * Non in-place function definitions, compatible with mathjs code *\n */\n\n'use strict';\n\nvar Matrix = require('ml-matrix');\n\nfunction matrix(A,B){\n    return new Matrix(A,B);\n}\n\nfunction ones(rows, cols){\n    return Matrix.ones(rows,cols);\n}\n\nfunction eye(rows, cols){\n    return Matrix.eye(rows, cols);\n}\n\nfunction zeros(rows, cols){\n    return Matrix.zeros(rows, cols);\n}\n\nfunction random(rows, cols){\n    return Matrix.rand(rows,cols);\n}\n\nfunction transpose(A){\n    if(typeof A == 'number')\n        return A;\n    var result = A.clone();\n    return result.transpose();\n}\n\nfunction add(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A+B;\n    if(typeof A == 'number')\n        return this.add(B,A);\n\n    var result = A.clone();\n    return result.add(B);\n\n}\n\nfunction subtract(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A-B;\n    if(typeof A == 'number')\n        return this.subtract(B,A);\n    var result = A.clone();\n    return result.sub(B);\n}\n\nfunction multiply(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A*B;\n    if(typeof A == 'number')\n        return this.multiply(B,A);\n\n    var result = A.clone();\n\n    if(typeof B === 'number')\n        result.mul(B);\n    else\n        result = result.mmul(B);\n\n    if(result.rows==1&&result.columns==1)\n        return result[0][0];\n    else\n        return result;\n\n}\n\nfunction dotMultiply(A, B){\n    var result = A.clone();\n    return result.mul(B);\n}\n\nfunction dotDivide(A, B){\n    var result = A.clone();\n    return result.div(B);\n}\n\nfunction diag(A){\n    var diag = null;\n    var rows = A.rows, cols = A.columns, j, r;\n    //It is an array\n    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n        if(A[0]&&A[0].length){\n            rows = A.length;\n            cols = A[0].length;\n            r = Math.min(rows,cols);\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j][j];\n            }\n        }\n        else{\n            cols = A.length;\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j];\n            }\n        }\n\n    }\n    if(rows == 1){\n        diag = Matrix.zeros(cols, cols);\n        for (j = 0; j < cols; j++) {\n            diag[j][j]=A[0][j];\n        }\n    }\n    else{\n        if(rows>0 && cols > 0){\n            r = Math.min(rows,cols);\n            diag = new Array(r);\n            for (j = 0; j < r; j++) {\n                diag[j] = A[j][j];\n            }\n        }\n    }\n    return diag;\n}\n\nfunction min(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.min(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] < B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction max(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.max(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] > B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction sqrt(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.sqrt(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction abs(A){\n    if(typeof A==='number' )\n        return Math.abs(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.abs(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction exp(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.exp(A[i][j]);\n        }\n    }\n    return result;\n}\n\nfunction dotPow(A, b){\n    if(typeof A==='number' )\n        return Math.pow(A,b);\n    //console.log(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.pow(A[i][j],b);\n        }\n    }\n    return result;\n}\n\nfunction solve(A, B){\n    return A.solve(B);\n}\n\nfunction inv(A){\n    if(typeof A ===\"number\")\n        return 1/A;\n    return A.inverse();\n}\n\nmodule.exports = {\n    transpose:transpose,\n    add:add,\n    subtract:subtract,\n    multiply:multiply,\n    dotMultiply:dotMultiply,\n    dotDivide:dotDivide,\n    diag:diag,\n    min:min,\n    max:max,\n    solve:solve,\n    inv:inv,\n    sqrt:sqrt,\n    exp:exp,\n    dotPow:dotPow,\n    abs:abs,\n    matrix:matrix,\n    ones:ones,\n    zeros:zeros,\n    random:random,\n    eye:eye\n};\n","/**\n * Created by acastillo on 8/5/15.\n */\nvar Matrix = require(\"ml-matrix\");\nvar math = require(\"./algebra\");\n\nvar DEBUG = false;\n/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n ----------  INPUT  VARIABLES  -----------\n func   = function of n independent variables, 't', and m parameters, 'p',\n returning the simulated model: y_hat = func(t,p,c)\n p      = n-vector of initial guess of parameter values\n t      = m-vectors or matrix of independent variables (used as arg to func)\n y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n weight = weighting vector for least squares fit ( weight >= 0 ) ...\n inverse of the standard measurement errors\n Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n dp     = fractional increment of 'p' for numerical derivatives\n dp(j)>0 central differences calculated\n dp(j)<0 one sided 'backwards' differences calculated\n dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n Default:  0.001;\n p_min  = n-vector of lower bounds for parameter values\n p_max  = n-vector of upper bounds for parameter values\n c      = an optional matrix of values passed to func(t,p,c)\n opts   = vector of algorithmic parameters\n parameter    defaults    meaning\n opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n 2: Quadratic update\n 3: Nielsen's lambda update equations\n\n ----------  OUTPUT  VARIABLES  -----------\n p       = least-squares optimal estimate of the parameter values\n X2      = Chi squared criteria\n sigma_p = asymptotic standard error of the parameters\n sigma_y = asymptotic standard error of the curve-fit\n corr    = correlation matrix of the parameters\n R_sq    = R-squared cofficient of multiple determination\n cvg_hst = convergence history\n\n Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n using references by\n Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n Mathworks        optimization toolbox reference manual\n K. Madsen, H.B., Nielsen, and O. Tingleff\n http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n */\nvar LM = {\n\n    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\n        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\n        var iteration  = 0;\t\t\t// iteration counter\n        //func_calls = 0;\t\t\t// running count of function evaluations\n\n        if((typeof p[0])!=\"object\"){\n            for(var i=0;i< p.length;i++){\n                p[i]=[p[i]];\n            }\n\n        }\n        //p = p(:); y_dat = y_dat(:); \t\t// make column vectors\n        var i,k;\n        var eps = 2^-52;\n        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var J =  Matrix.zeros(Npnt,Npar);\n\n\n        if (t.length != y_dat.length) {\n            console.log('lm.m error: the length of t must equal the length of y_dat');\n\n            length_t = t.length;\n            length_y_dat = y_dat.length;\n            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n            if (!tensor_parameter) {\n                return;\n            }\n        }\n\n        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n        dp = dp || 0.001;\n        p_min   = p_min || math.multiply(Math.abs(p),-100);\n        p_max   = p_max || math.multiply(Math.abs(p),100);\n        c = c || 1;\n        // Algorithmic Paramters\n        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\n        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n        var MaxIter       = opts[1];\t// maximum number of iterations\n        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n        // 2: Quadratic update\n        // 3: Nielsen's lambda update equations\n\n        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\n\n        if(!dp.length || dp.length == 1){\n            var dp_array = new Array(Npar);\n            for(var i=0;i<Npar;i++)\n                dp_array[i]=[dp];\n            dp=dp_array;\n        }\n\n        // indices of the parameters to be fit\n        var idx   = [];\n        for(i=0;i<dp.length;i++){\n            if(dp[i][0]!=0){\n                idx.push(i);\n            }\n        }\n\n        var Nfit = idx.length;\t\t\t// number of parameters to fit\n        var stop = false;\t\t\t\t// termination flag\n\n        var weight_sq = null;\n        //console.log(weight);\n        if ( !weight.length || weight.length < Npnt )\t{\n            // squared weighting vector\n            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n            //console.log(\"weight[0] \"+typeof weight[0]);\n            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n            weight_sq = math.dotMultiply(tmp,tmp);\n        }\n        else{\n            //weight_sq = (weight(:)).^2;\n            weight_sq = math.dotMultiply(weight,weight);\n        }\n\n\n        // initialize Jacobian with finite difference calculation\n        //console.log(\"J \"+weight_sq);\n        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        //console.log(JtWJ);\n\n        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n            console.log(' *** epsilon_1 = ', epsilon_1);\n            stop = true;\n        }\n\n\n        switch(Update_Type){\n            case 1: // Marquardt: init'l lambda\n                lambda  = lambda_0;\n                break;\n            default:    // Quadratic and Nielsen\n                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n                nu=2;\n        }\n        //console.log(X2);\n        X2_old = X2; // previous value of X2\n        //console.log(MaxIter+\" \"+Npar);\n        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n        var h = null;\n        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n            iteration = iteration + 1;\n            // incremental change in parameters\n            switch(Update_Type){\n                case 1:\t\t\t\t\t// Marquardt\n                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n                    break;\n                default:\t\t\t\t\t// Quadratic and Nielsen\n                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\n                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n            }\n\n            /*for(var k=0;k< h.length;k++){\n             h[k]=[h[k]];\n             }*/\n            //console.log(\"h \"+h);\n            //h=math.matrix(h);\n            //  big = max(abs(h./p)) > 2;\n            //this is a big step\n            // --- Are parameters [p+h] much better than [p] ?\n            var hidx = new Array(idx.length);\n            for(k=0;k<idx.length;k++){\n                hidx[k]=h[idx[k]];\n            }\n            var p_try = math.add(p, hidx);// update the [idx] elements\n\n            for(k=0;k<p_try.length;k++){\n                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n            }\n            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\n            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n            //func_calls = func_calls + 1;\n            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\n            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\n            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n                //    One step of quadratic line update in the h direction for minimum X2\n                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\n                h = math.multiply(alpha, h);\n                for(var k=0;k<idx.length;k++){\n                    hidx[k]=h[idx[k]];\n                }\n\n                p_try = math.add(p ,hidx);                     // update only [idx] elements\n                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\n                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n                // func_calls = func_calls + 1;\n                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n            }\n\n            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n            //console.log(\"rho \"+rho);\n            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n                //console.log(\"Here\");\n                dX2 = X2 - X2_old;\n                X2_old = X2;\n                p_old = p;\n                y_old = y_hat;\n                p = p_try;\t\t\t// accept p_try\n\n                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                // decrease lambda ==> Gauss-Newton method\n\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n                        break;\n                    case 3:\t\t\t\t\t\t\t// Nielsen\n                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n                        nu = 2;\n                        break;\n                }\n            }\n            else {\t\t\t\t\t// it IS NOT better\n                X2 = X2_old;\t\t\t// do not accept p_try\n                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                }\n\n                // increase lambda  ==> gradient descent method\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n                        break;\n                    case 3:\t\t\t\t\t\t// Nielsen\n                        lambda = lambda * nu;\n                        nu = 2 * nu;\n                        break;\n                }\n            }\n        }// --- End of Main Loop\n\n        // --- convergence achieved, find covariance and confidence intervals\n\n        // equal weights for paramter error analysis\n        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\n        weight_sq.apply(function(i,j){\n            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n        });\n        //console.log(weight_sq);\n        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\n        /*if nargout > 2\t\t\t\t// standard error of parameters\n         covar = inv(JtWJ);\n         sigma_p = sqrt(diag(covar));\n         end\n\n         if nargout > 3\t\t\t\t// standard error of the fit\n         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n         sigma_y = zeros(Npnt,1);\n         for i=1:Npnt\n         sigma_y(i) = J(i,:) * covar * J(i,:)';\n         end\n         sigma_y = sqrt(sigma_y);\n         end\n\n         if nargout > 4\t\t\t\t// parameter correlation matrix\n         corr = covar ./ [sigma_p*sigma_p'];\n         end\n\n         if nargout > 5\t\t\t\t// coefficient of multiple determination\n         R_sq = corrcoef([y_dat y_hat]);\n         R_sq = R_sq(1,2).^2;\n         end\n\n         if nargout > 6\t\t\t\t// convergence history\n         cvg_hst = cvg_hst(1:iteration,:);\n         end*/\n\n        // endfunction  # ---------------------------------------------------------- LM\n\n        return { p:p, X2:X2};\n    },\n\n    lm_FD_J:function(func,t,p,y,dp,c) {\n        // J = lm_FD_J(func,t,p,y,{dp},{c})\n        //\n        // partial derivatives (Jacobian) dy/dp for use with lm.m\n        // computed via Finite Differences\n        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n        // -------- INPUT VARIABLES ---------\n        // func = function of independent variables, 't', and parameters, 'p',\n        //        returning the simulated model: y_hat = func(t,p,c)\n        // t  = m-vector of independent variables (used as arg to func)\n        // p  = n-vector of current parameter values\n        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n        // dp = fractional increment of p for numerical derivatives\n        //      dp(j)>0 central differences calculated\n        //      dp(j)<0 one sided differences calculated\n        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //      Default:  0.001;\n        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n        var m = y.length;\t\t\t// number of data points\n        var n = p.length;\t\t\t// number of parameters\n\n        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\n        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n        //var ps = $.extend(true, [], p);\n        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\n        for (var j = 0;j < n; j++) {\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\n            if (del[j] != 0){\n                y1 = func(t, p, c);\n                //func_calls = func_calls + 1;\n                if (dp[j][0] < 0) {\t\t// backwards difference\n                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n                    //console.log(del[j]);\n                    //console.log(y);\n                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n                    //console.log(column);\n                }\n                else{\n                    p[j][0] = ps[j][0] - del[j];\n                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n\n                }\t\t\t// central difference, additional func call\n            }\n\n            p[j] = ps[j];\t\t// restore p(j)\n\n        }\n        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n        return J;\n\n    },\n\n    // endfunction # -------------------------------------------------- LM_FD_J\n    lm_Broyden_J: function(p_old,y_old,J,p,y){\n        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n        //---------- INPUT VARIABLES -------\n        // p_old = previous set of parameters\n        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n        // J  = current version of the Jacobian matrix\n        // p     = current  set of parameters\n        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n        //---------- OUTPUT VARIABLES -------\n        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n        //console.log(p+\" X \"+ p_old)\n        var h  = math.subtract(p, p_old);\n\n        //console.log(\"hhh \"+h);\n        var h_t = math.transpose(h);\n        h_t.div(math.multiply(h_t,h));\n\n        //console.log(h_t);\n        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n        return J;\n        // endfunction # ---------------------------------------------- LM_Broyden_J\n    },\n\n    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n        //\n        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n        // and calculate the Chi-squared error function, Chi_sq\n        // Used by Levenberg-Marquard algorithm, lm.m\n        // -------- INPUT VARIABLES ---------\n        // func   = function ofpn independent variables, p, and m parameters, p,\n        //         returning the simulated model: y_hat = func(t,p,c)\n        // t      = m-vectors or matrix of independent variables (used as arg to func)\n        // p_old  = n-vector of previous parameter values\n        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n        // dX2    = previous change in Chi-squared criteria\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n        // p      = n-vector of current  parameter values\n        // y_dat  = n-vector of data to be fit by func(t,p,c)\n        // weight_sq = square of the weighting vector for least squares fit ...\n        //\t    inverse of the standard measurement errors\n        // dp     = fractional increment of 'p' for numerical derivatives\n        //          dp(j)>0 central differences calculated\n        //          dp(j)<0 one sided differences calculated\n        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //          Default:  0.001;\n        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n        // JtWdy   = linearized fitting vector\n        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n        // y_hat  = model evaluated with parameters 'p'\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n\n        var Npnt = y_dat.length;\t\t// number of data points\n        var Npar = p.length;\t\t// number of parameters\n\n        dp = dp || 0.001;\n\n\n        //var JtWJ = new Matrix.zeros(Npar);\n        //var JtWdy  = new Matrix.zeros(Npar,1);\n\n        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n        //func_calls = func_calls + 1;\n        //console.log(J);\n        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n            //console.log(\"Par\");\n            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n        }\n        else{\n            //console.log(\"ImPar\");\n            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n        }\n        //console.log(y_dat);\n        //console.log(y_hat);\n        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n        //console.log(delta_y[0][0]);\n        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n        var Jt = math.transpose(J);\n\n        //console.log(weight_sq);\n\n        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\n        //JtWdy = J' * ( weight_sq .* delta_y );\n        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\n\n        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n        // endfunction  # ------------------------------------------------------ LM_MATX\n    }\n\n\n\n};\n\nmodule.exports = LM;","'use strict';\n\nmodule.exports = require('./LM');\nmodule.exports.Matrix = require('ml-matrix');\nmodule.exports.Matrix.algebra = require('./algebra');\n","'use strict';\n\nvar LM = require('ml-curve-fitting');\nvar math = LM.Matrix.algebra;\nvar Matrix = require('ml-matrix');\n\n/**\n * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfLorentzians(t,p,c){\n    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        p2 = Math.pow(p[i+nL*2][0]/2,2);\n        factor = p[i+nL][0]*p2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n        }\n    }\n    return result;\n}\n\n/**\n * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n * @param t Ordinate values\n * @param p Gaussian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfGaussians(t,p,c){\n    var nL = p.length/3,factor,i, j, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n        }\n    }\n    return result;\n}\n/**\n * Single 4 parameter lorentzian function\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleLorentzian(t,p,c){\n    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n    }\n    return result;\n}\n\n/**\n * Single 3 parameter gaussian function\n * @param t Ordinate values\n * @param p Gaussian parameters [mean, height, std]\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleGaussian(t,p,c){\n    var factor2 = p[2][0]*p[2][0]/2;\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n    }\n    return result;\n}\n\n/**\n * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleLorentzian(xy, peak, opts) {\n    opts = opts || {};\n    var xy2 = parseData(xy, opts.percentage||0);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts.LMOptions || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];\n    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\n    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\n\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\n}\n\n/**\n * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleGaussian(xy, peak, opts) {\n    opts = opts || {};\n    var xy2 = parseData(xy, opts.percentage||0);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n\n    var nbPoints = t.rows, i;\n\n\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts.LMOptions || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];                         // optional vector of constants\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\n    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\n    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n}\n\n/*\n peaks on group should sorted\n */\nfunction optimizeLorentzianTrain(xy, group, opts){\n    var xy2 = parseData(xy);\n    //console.log(xy2[0].rows);\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var currentIndex = 0;\n    var nbPoints = t.length;\n    var nextX;\n    var tI, yI, maxY;\n    var result=[], current;\n    for(var i=0; i<group.length;i++){\n        nextX = group[i].x-group[i].width*1.5;\n        //console.log(group[i]);\n        while(t[currentIndex++]<nextX&&currentIndex<nbPoints);\n        nextX = group[i].x+group[i].width*1.5;\n        tI = [];\n        yI = [];\n        while(t[currentIndex]<=nextX&&currentIndex<nbPoints){\n            tI.push(t[currentIndex][0]);\n            yI.push(y_data[currentIndex][0]*maxY);\n            currentIndex++;\n        }\n\n        current=optimizeSingleLorentzian([tI, yI], group[i], opts);\n        if(current){\n            result.push({\"x\":current[0][0],\"y\":current[1][0],\"width\":current[2][0],\"opt\":true});\n        }\n        else{\n            result.push({\"x\":group[i].x,\"y\":group[i].y,\"width\":group[i].width,\"opt\":false});\n        }\n    }\n\n    return result;\n\n}\n\nfunction optimizeGaussianTrain(xy, group, opts){\n    var xy2 = parseData(xy);\n    //console.log(xy2[0].rows);\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var currentIndex = 0;\n    var nbPoints = t.length;\n    var nextX;\n    var tI, yI, maxY;\n    var result=[], current;\n    for(var i=0; i<group.length;i++){\n        nextX = group[i].x-group[i].width*1.5;\n        //console.log(group[i]);\n        while(t[currentIndex++]<nextX&&currentIndex<nbPoints);\n        nextX = group[i].x+group[i].width*1.5;\n        tI = [];\n        yI = [];\n        while(t[currentIndex]<=nextX&&currentIndex<nbPoints){\n            tI.push(t[currentIndex][0]);\n            yI.push(y_data[currentIndex][0]*maxY);\n            currentIndex++;\n        }\n\n        current=optimizeSingleGaussian([tI, yI], group[i], opts);\n        if(current){\n            result.push({\"x\":current[0][0],\"y\":current[1][0],\"width\":current[2][0],\"opt\":true});\n        }\n        else{\n            result.push({\"x\":group[i].x,\"y\":group[i].y,\"width\":group[i].width,\"opt\":false});\n        }\n    }\n\n    return result;\n}\n\n\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeLorentzianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows, i;\n\n    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ]);\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = 1;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n        p_min[i+nL][0] = 0;\n        p_min[i+2*nL][0] = group[i].width/4;\n\n        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n        p_max[i+nL][0] = 1.5;\n        p_max[i+2*nL][0] = group[i].width*4;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n\n    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n    p_fit=p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeGaussianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows,i;\n\n    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n    for(i=0;i<nbPoints;i++){\n        weight[i][0]=k;///(y_data[i][0]);\n        //weight[i][0]=k*(2-y_data[i][0]);\n    }\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = group[i].y/maxY;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;\n        p_min[i+nL][0] = group[i].y*0.8/maxY;\n        p_min[i+2*nL][0] = group[i].width/2;\n\n        p_max[i][0] = group[i].x+dt;\n        p_max[i+nL][0] = group[i].y*1.2/maxY;\n        p_max[i+2*nL][0] = group[i].width*2;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n    //console.log(t);\n    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n/**\n *\n * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n * @param xy\n * @returns {*[]}\n */\nfunction parseData(xy, threshold){\n    var nbSeries = xy.length;\n    var t = null;\n    var y_data = null, x,y;\n    var maxY = 0, i,j;\n\n    if(nbSeries==2){\n        //Looks like row wise matrix [x,y]\n        var nbPoints = xy[0].length;\n        //if(nbPoints<3)\n        //    throw new Exception(nbPoints);\n        //else{\n        t = new Array(nbPoints);//new Matrix(nbPoints,1);\n        y_data = new Array(nbPoints);//new Matrix(nbPoints,1);\n        x = xy[0];\n        y = xy[1];\n        if(typeof x[0] === \"number\"){\n            for(i=0;i<nbPoints;i++){\n                t[i]=x[i];\n                y_data[i]=y[i];\n                if(y[i]>maxY)\n                    maxY = y[i];\n            }\n        }\n        else{\n            //It is a colum matrix\n            if(typeof x[0] === \"object\"){\n                for(i=0;i<nbPoints;i++){\n                    t[i]=x[i][0];\n                    y_data[i]=y[i][0];\n                    if(y[i][0]>maxY)\n                        maxY = y[i][0];\n                }\n            }\n\n        }\n\n        //}\n    }\n    else{\n        //Looks like a column wise matrix [[x],[y]]\n        var nbPoints = nbSeries;\n        //if(nbPoints<3)\n        //    throw new SizeException(nbPoints);\n        //else {\n        t = new Array(nbPoints);//new Matrix(nbPoints, 1);\n        y_data = new Array(nbPoints);//new Matrix(nbPoints, 1);\n        for (i = 0; i < nbPoints; i++) {\n            t[i] = xy[i][0];\n            y_data[i] = xy[i][1];\n            if(y_data[i]>maxY)\n                maxY = y_data[i];\n        }\n        //}\n    }\n    for (i = 0; i < nbPoints; i++) {\n        y_data[i]/=maxY;\n    }\n    if(threshold){\n        for (i = nbPoints-1; i >=0; i--) {\n            if(y_data[i]<threshold) {\n                y_data.splice(i,1);\n                t.splice(i,1);\n            }\n        }\n    }\n    if(t.length>0)\n        return [(new Matrix([t])).transpose(),(new Matrix([y_data])).transpose(),maxY];\n    return null;\n}\n\nfunction sizeException(nbPoints) {\n    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n}\n\nmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\nmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\nmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\nmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\nmodule.exports.singleGaussian = singleGaussian;\nmodule.exports.singleLorentzian = singleLorentzian;\nmodule.exports.optimizeGaussianTrain = optimizeGaussianTrain;\nmodule.exports.optimizeLorentzianTrain = optimizeLorentzianTrain;","/**\n * Created by acastillo on 9/6/15.\n */\n'use strict';\n\nvar optimize = require('ml-optimize-lorentzian');\n\nfunction sampleFunction(from, to, x, y, lastIndex) {\n  var nbPoints = x.length;\n  var sampleX = [];\n  var sampleY = [];\n  var direction = Math.sign(x[1] - x[0]); // Direction of the derivative\n  if (direction === -1) {\n    lastIndex[0] = x.length - 1;\n  }\n\n  var delta = Math.abs(to - from) / 2;\n  var mid = (from + to) / 2;\n  var stop = false;\n  var index = lastIndex[0];\n  while (!stop && index < nbPoints && index >= 0) {\n    if (Math.abs(x[index] - mid) <= delta) {\n      sampleX.push(x[index]);\n      sampleY.push(y[index]);\n      index += direction;\n    } else {\n      // It is outside the range.\n      if (Math.sign(mid - x[index]) === 1) {\n        // We'll reach the mid going in the current direction\n        index += direction;\n      } else {\n        // There is not more peaks in the current range\n        stop = true;\n      }\n    }\n    // console.log(sampleX);\n  }\n  lastIndex[0] = index;\n  return [sampleX, sampleY];\n}\n\nmodule.exports = function optimizePeaks(peakList, x, y, n, fnType) {\n  var i;\n  var j;\n\n  var lastIndex = [0];\n  var groups = groupPeaks(peakList, n);\n  var result = [];\n  var factor = 1;\n  if (fnType === 'gaussian') {\n    factor = 1.17741;\n  } // From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n  var sampling, error, opts;\n  for (i = 0; i < groups.length; i++) {\n    var peaks = groups[i].group;\n    if (peaks.length > 1) {\n      // Multiple peaks\n      // console.log(\"Pending group of overlaped peaks \"+peaks.length);\n      // console.log(\"here1\");\n      // console.log(groups[i].limits);\n      sampling = sampleFunction(\n        groups[i].limits[0] - groups[i].limits[1],\n        groups[i].limits[0] + groups[i].limits[1],\n        x,\n        y,\n        lastIndex\n      );\n      // console.log(sampling);\n      if (sampling[0].length > 5) {\n        error = peaks[0].width / 1000;\n        opts = [3, 100, error, error, error, error * 10, error * 10, 11, 9, 1];\n        // var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n        var optPeaks = [];\n        if (fnType === 'gaussian') {\n          optPeaks = optimize.optimizeGaussianSum(sampling, peaks, opts);\n        } else {\n          if (fnType === 'lorentzian') {\n            optPeaks = optimize.optimizeLorentzianSum(sampling, peaks, opts);\n          }\n        }\n        // console.log(optPeak);\n        for (j = 0; j < optPeaks.length; j++) {\n          result.push({\n            x: optPeaks[j][0][0],\n            y: optPeaks[j][1][0],\n            width: optPeaks[j][2][0] * factor\n          });\n        }\n      }\n    } else {\n      // Single peak\n      peaks = peaks[0];\n      sampling = sampleFunction(\n        peaks.x - n * peaks.width,\n        peaks.x + n * peaks.width,\n        x,\n        y,\n        lastIndex\n      );\n      // console.log(\"here2\");\n      // console.log(groups[i].limits);\n      if (sampling[0].length > 5) {\n        error = peaks.width / 1000;\n        opts = [3, 100, error, error, error, error * 10, error * 10, 11, 9, 1];\n        // var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n        // var gauss = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks, opts);\n        var optPeak = [];\n        if (fnType === 'gaussian') {\n          optPeak = optimize.optimizeSingleGaussian(\n            [sampling[0], sampling[1]],\n            peaks,\n            opts\n          );\n        } else {\n          if (fnType === 'lorentzian') {\n            optPeak = optimize.optimizeSingleLorentzian(\n              [sampling[0], sampling[1]],\n              peaks,\n              opts\n            );\n          }\n        }\n        // console.log(optPeak);\n        result.push({\n          x: optPeak[0][0],\n          y: optPeak[1][0],\n          width: optPeak[2][0] * factor\n        }); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n      }\n    }\n  }\n  return result;\n};\n\nfunction groupPeaks(peakList, nL) {\n  var group = [];\n  var groups = [];\n  var i, j;\n  var limits = [peakList[0].x, nL * peakList[0].width];\n  var upperLimit, lowerLimit;\n  // Merge forward\n  for (i = 0; i < peakList.length; i++) {\n    // If the 2 things overlaps\n    if (\n      Math.abs(peakList[i].x - limits[0]) <\n      nL * peakList[i].width + limits[1]\n    ) {\n      // Add the peak to the group\n      group.push(peakList[i]);\n      // Update the group limits\n      upperLimit = limits[0] + limits[1];\n      if (peakList[i].x + nL * peakList[i].width > upperLimit) {\n        upperLimit = peakList[i].x + nL * peakList[i].width;\n      }\n      lowerLimit = limits[0] - limits[1];\n      if (peakList[i].x - nL * peakList[i].width < lowerLimit) {\n        lowerLimit = peakList[i].x - nL * peakList[i].width;\n      }\n      limits = [\n        (upperLimit + lowerLimit) / 2,\n        Math.abs(upperLimit - lowerLimit) / 2\n      ];\n    } else {\n      groups.push({ limits: limits, group: group });\n      // var optmimalPeak = fitSpectrum(group,limits,spectrum);\n      group = [peakList[i]];\n      limits = [peakList[i].x, nL * peakList[i].width];\n    }\n  }\n  groups.push({ limits: limits, group: group });\n  // Merge backward\n  for (i = groups.length - 2; i >= 0; i--) {\n    // The groups overlaps\n    if (\n      Math.abs(groups[i].limits[0] - groups[i + 1].limits[0]) <\n      (groups[i].limits[1] + groups[i + 1].limits[1]) / 2\n    ) {\n      for (j = 0; j < groups[i + 1].group.length; j++) {\n        groups[i].group.push(groups[i + 1].group[j]);\n      }\n      upperLimit = groups[i].limits[0] + groups[i].limits[1];\n      if (groups[i + 1].limits[0] + groups[i + 1].limits[1] > upperLimit) {\n        upperLimit = groups[i + 1].limits[0] + groups[i + 1].limits[1];\n      }\n      lowerLimit = groups[i].limits[0] - groups[i].limits[1];\n      if (groups[i + 1].limits[0] - groups[i + 1].limits[1] < lowerLimit) {\n        lowerLimit = groups[i + 1].limits[0] - groups[i + 1].limits[1];\n      }\n      // console.log(limits);\n      groups[i].limits = [\n        (upperLimit + lowerLimit) / 2,\n        Math.abs(upperLimit - lowerLimit) / 2\n      ];\n\n      groups.splice(i + 1, 1);\n    }\n  }\n  return groups;\n}\n","'use strict';\n\nvar Opt = require('ml-optimize-lorentzian');\n\n/**\n * This function try to join the peaks that seems to belong to a broad signal in a single broad peak.\n * @param peakList\n * @param options\n */\nmodule.exports = function joinBroadPeaks(peakList, options = {}) {\n  var width = options.width;\n  var broadLines = [];\n  // Optimize the possible broad lines\n  var max = 0;\n\n  var maxI = 0;\n\n  var count = 1;\n  for (let i = peakList.length - 1; i >= 0; i--) {\n    if (peakList[i].soft) {\n      broadLines.push(peakList.splice(i, 1)[0]);\n    }\n  }\n  // Push a feak peak\n  broadLines.push({ x: Number.MAX_VALUE });\n\n  var candidates = [[broadLines[0].x, broadLines[0].y]];\n  var indexes = [0];\n\n  for (let i = 1; i < broadLines.length; i++) {\n    // console.log(broadLines[i-1].x+\" \"+broadLines[i].x);\n    if (Math.abs(broadLines[i - 1].x - broadLines[i].x) < width) {\n      candidates.push([broadLines[i].x, broadLines[i].y]);\n      if (broadLines[i].y > max) {\n        max = broadLines[i].y;\n        maxI = i;\n      }\n      indexes.push(i);\n      count++;\n    } else {\n      if (count > 2) {\n        var fitted = Opt.optimizeSingleLorentzian(candidates, {\n          x: broadLines[maxI].x,\n          y: max,\n          width: Math.abs(\n            candidates[0][0] - candidates[candidates.length - 1][0]\n          )\n        });\n        peakList.push({\n          x: fitted[0][0],\n          y: fitted[1][0],\n          width: fitted[2][0],\n          soft: false\n        });\n      } else {\n        // Put back the candidates to the signals list\n        indexes.forEach((index) => {\n          peakList.push(broadLines[index]);\n        });\n      }\n      candidates = [[broadLines[i].x, broadLines[i].y]];\n      indexes = [i];\n      max = broadLines[i].y;\n      maxI = i;\n      count = 1;\n    }\n  }\n\n  peakList.sort(function (a, b) {\n    return a.x - b.x;\n  });\n\n  return peakList;\n};\n","'use strict';\n\n/**\n * This method will allow to enlarge peaks and prevent overlap between peaks\n * Because peaks may not be symmetric after we add 2 properties, from and to.\n * @param {Array} peakList\n * @param {object} [options={}]\n * @param {number} [factor=2]\n * @param {boolean} [overlap=false] by default we don't allow overlap\n * @return {Array} peakList\n */\nmodule.exports = function broadenPeaks(peakList, options = {}) {\n  const { factor = 2, overlap = false } = options;\n\n  for (let peak of peakList) {\n    peak.from = peak.x - (peak.width / 2) * factor;\n    peak.to = peak.x + (peak.width / 2) * factor;\n  }\n\n  if (!overlap) {\n    for (let i = 0; i < peakList.length - 1; i++) {\n      let peak = peakList[i];\n      let nextPeak = peakList[i + 1];\n      if (peak.to > nextPeak.from) {\n        peak.to = nextPeak.from = (peak.to + nextPeak.from) / 2;\n      }\n    }\n  }\n\n  for (let peak of peakList) {\n    peak.width = peak.to - peak.from;\n  }\n\n  return peakList;\n};\n","'use strict';\n\nmodule.exports.gsd = require('./gsd');\n\nmodule.exports.post = {\n  optimizePeaks: require('./post/optimizePeaks'),\n  joinBroadPeaks: require('./post/joinBroadPeaks'),\n  broadenPeaks: require('./post/broadenPeaks')\n};\n","'use strict';\n\nfunction getConverter() {\n  // the following RegExp can only be used for XYdata, some peakTables have values with a \"E-5\" ...\n  const ntuplesSeparator = /[, \\t]+/;\n  const GC_MS_FIELDS = ['TIC', '.RIC', 'SCANNUMBER'];\n\n  function convertToFloatArray(stringArray) {\n    var floatArray = [];\n    for (let i = 0; i < stringArray.length; i++) {\n      floatArray.push(parseFloat(stringArray[i]));\n    }\n    return floatArray;\n  }\n\n  class Spectrum {}\n\n  const defaultOptions = {\n    keepRecordsRegExp: /^$/,\n    xy: false,\n    withoutXY: false,\n    chromatogram: false,\n    keepSpectra: false,\n    noContour: false,\n    nbContourLevels: 7,\n    noiseMultiplier: 5,\n    profiling: false\n  };\n\n  function convert(jcamp, options) {\n    options = Object.assign({}, defaultOptions, options);\n\n    var wantXY = !options.withoutXY;\n\n    var start = Date.now();\n\n    var ntuples = {};\n    var ldr, dataLabel, dataValue, ldrs;\n    var position, endLine, infos;\n\n    var result = {};\n    result.profiling = options.profiling ? [] : false;\n    result.logs = [];\n    var spectra = [];\n    result.spectra = spectra;\n    result.info = {};\n    var spectrum = new Spectrum();\n\n    if (!(typeof jcamp === 'string')) {\n      throw new TypeError('the JCAMP should be a string');\n    }\n\n    if (result.profiling) {\n      result.profiling.push({\n        action: 'Before split to LDRS',\n        time: Date.now() - start\n      });\n    }\n\n    ldrs = jcamp.split(/[\\r\\n]+##/);\n\n    if (result.profiling) {\n      result.profiling.push({\n        action: 'Split to LDRS',\n        time: Date.now() - start\n      });\n    }\n\n    if (ldrs[0]) ldrs[0] = ldrs[0].replace(/^[\\r\\n ]*##/, '');\n\n    for (let i = 0; i < ldrs.length; i++) {\n      ldr = ldrs[i];\n      // This is a new LDR\n      position = ldr.indexOf('=');\n      if (position > 0) {\n        dataLabel = ldr.substring(0, position);\n        dataValue = ldr.substring(position + 1).trim();\n      } else {\n        dataLabel = ldr;\n        dataValue = '';\n      }\n      dataLabel = dataLabel.replace(/[_ -]/g, '').toUpperCase();\n\n      if (dataLabel === 'DATATABLE') {\n        endLine = dataValue.indexOf('\\n');\n        if (endLine === -1) endLine = dataValue.indexOf('\\r');\n        if (endLine > 0) {\n          var xIndex = -1;\n          var yIndex = -1;\n          // ##DATA TABLE= (X++(I..I)), XYDATA\n          // We need to find the variables\n\n          infos = dataValue.substring(0, endLine).split(/[ ,;\\t]+/);\n          if (infos[0].indexOf('++') > 0) {\n            var firstVariable = infos[0].replace(\n              /.*\\(([a-zA-Z0-9]+)\\+\\+.*/,\n              '$1'\n            );\n            var secondVariable = infos[0].replace(\n              /.*\\.\\.([a-zA-Z0-9]+).*/,\n              '$1'\n            );\n            xIndex = ntuples.symbol.indexOf(firstVariable);\n            yIndex = ntuples.symbol.indexOf(secondVariable);\n          }\n\n          if (xIndex === -1) xIndex = 0;\n          if (yIndex === -1) yIndex = 0;\n\n          if (ntuples.first) {\n            if (ntuples.first.length > xIndex) {\n              spectrum.firstX = ntuples.first[xIndex];\n            }\n            if (ntuples.first.length > yIndex) {\n              spectrum.firstY = ntuples.first[yIndex];\n            }\n          }\n          if (ntuples.last) {\n            if (ntuples.last.length > xIndex) {\n              spectrum.lastX = ntuples.last[xIndex];\n            }\n            if (ntuples.last.length > yIndex) {\n              spectrum.lastY = ntuples.last[yIndex];\n            }\n          }\n          if (ntuples.vardim && ntuples.vardim.length > xIndex) {\n            spectrum.nbPoints = ntuples.vardim[xIndex];\n          }\n          if (ntuples.factor) {\n            if (ntuples.factor.length > xIndex) {\n              spectrum.xFactor = ntuples.factor[xIndex];\n            }\n            if (ntuples.factor.length > yIndex) {\n              spectrum.yFactor = ntuples.factor[yIndex];\n            }\n          }\n          if (ntuples.units) {\n            if (ntuples.units.length > xIndex) {\n              spectrum.xUnit = ntuples.units[xIndex];\n            }\n            if (ntuples.units.length > yIndex) {\n              spectrum.yUnit = ntuples.units[yIndex];\n            }\n          }\n          spectrum.datatable = infos[0];\n          if (infos[1] && infos[1].indexOf('PEAKS') > -1) {\n            dataLabel = 'PEAKTABLE';\n          } else if (\n            infos[1] &&\n            (infos[1].indexOf('XYDATA') || infos[0].indexOf('++') > 0)\n          ) {\n            dataLabel = 'XYDATA';\n            spectrum.deltaX =\n              (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n          }\n        }\n      }\n\n      if (dataLabel === 'XYDATA') {\n        if (wantXY) {\n          prepareSpectrum(result, spectrum);\n          // well apparently we should still consider it is a PEAK TABLE if there are no '++' after\n          if (dataValue.match(/.*\\+\\+.*/)) {\n            // ex: (X++(Y..Y))\n            if (!spectrum.deltaX) {\n              spectrum.deltaX =\n                (spectrum.lastX - spectrum.firstX) / (spectrum.nbPoints - 1);\n            }\n            fastParseXYData(spectrum, dataValue, result);\n          } else {\n            parsePeakTable(spectrum, dataValue, result);\n          }\n          spectra.push(spectrum);\n          spectrum = new Spectrum();\n        }\n        continue;\n      } else if (dataLabel === 'PEAKTABLE') {\n        if (wantXY) {\n          prepareSpectrum(result, spectrum);\n          parsePeakTable(spectrum, dataValue, result);\n          spectra.push(spectrum);\n          spectrum = new Spectrum();\n        }\n        continue;\n      }\n      if (dataLabel === 'PEAKASSIGNMENTS') {\n        if (wantXY) {\n          if (dataValue.match(/.*(XYA).*/)) {\n            // ex: (XYA)\n            parseXYA(spectrum, dataValue);\n          }\n          spectra.push(spectrum);\n          spectrum = new Spectrum();\n        }\n        continue;\n      }\n\n      if (dataLabel === 'TITLE') {\n        spectrum.title = dataValue;\n      } else if (dataLabel === 'DATATYPE') {\n        spectrum.dataType = dataValue;\n        if (dataValue.indexOf('nD') > -1) {\n          result.twoD = true;\n        }\n      } else if (dataLabel === 'NTUPLES') {\n        if (dataValue.indexOf('nD') > -1) {\n          result.twoD = true;\n        }\n      } else if (dataLabel === 'XUNITS') {\n        spectrum.xUnit = dataValue;\n      } else if (dataLabel === 'YUNITS') {\n        spectrum.yUnit = dataValue;\n      } else if (dataLabel === 'FIRSTX') {\n        spectrum.firstX = parseFloat(dataValue);\n      } else if (dataLabel === 'LASTX') {\n        spectrum.lastX = parseFloat(dataValue);\n      } else if (dataLabel === 'FIRSTY') {\n        spectrum.firstY = parseFloat(dataValue);\n      } else if (dataLabel === 'LASTY') {\n        spectrum.lastY = parseFloat(dataValue);\n      } else if (dataLabel === 'NPOINTS') {\n        spectrum.nbPoints = parseFloat(dataValue);\n      } else if (dataLabel === 'XFACTOR') {\n        spectrum.xFactor = parseFloat(dataValue);\n      } else if (dataLabel === 'YFACTOR') {\n        spectrum.yFactor = parseFloat(dataValue);\n      } else if (dataLabel === 'MAXX') {\n        spectrum.maxX = parseFloat(dataValue);\n      } else if (dataLabel === 'MINX') {\n        spectrum.minX = parseFloat(dataValue);\n      } else if (dataLabel === 'MAXY') {\n        spectrum.maxY = parseFloat(dataValue);\n      } else if (dataLabel === 'MINY') {\n        spectrum.minY = parseFloat(dataValue);\n      } else if (dataLabel === 'DELTAX') {\n        spectrum.deltaX = parseFloat(dataValue);\n      } else if (dataLabel === '.OBSERVEFREQUENCY' || dataLabel === '$SFO1') {\n        if (!spectrum.observeFrequency) {\n          spectrum.observeFrequency = parseFloat(dataValue);\n        }\n      } else if (dataLabel === '.OBSERVENUCLEUS') {\n        if (!spectrum.xType) {\n          result.xType = dataValue.replace(/[^a-zA-Z0-9]/g, '');\n        }\n      } else if (dataLabel === '$SFO2') {\n        if (!result.indirectFrequency) {\n          result.indirectFrequency = parseFloat(dataValue);\n        }\n      } else if (dataLabel === '$OFFSET') {\n        // OFFSET for Bruker spectra\n        result.shiftOffsetNum = 0;\n        if (!spectrum.shiftOffsetVal) {\n          spectrum.shiftOffsetVal = parseFloat(dataValue);\n        }\n      } else if (dataLabel === '$REFERENCEPOINT') {\n        // OFFSET for Varian spectra\n        // if we activate this part it does not work for ACD specmanager\n        //         } else if (dataLabel=='.SHIFTREFERENCE') {   // OFFSET FOR Bruker Spectra\n        //                 var parts = dataValue.split(/ *, */);\n        //                 result.shiftOffsetNum = parseInt(parts[2].trim());\n        //                 spectrum.shiftOffsetVal = parseFloat(parts[3].trim());\n      } else if (dataLabel === 'VARNAME') {\n        ntuples.varname = dataValue.split(ntuplesSeparator);\n      } else if (dataLabel === 'SYMBOL') {\n        ntuples.symbol = dataValue.split(ntuplesSeparator);\n      } else if (dataLabel === 'VARTYPE') {\n        ntuples.vartype = dataValue.split(ntuplesSeparator);\n      } else if (dataLabel === 'VARFORM') {\n        ntuples.varform = dataValue.split(ntuplesSeparator);\n      } else if (dataLabel === 'VARDIM') {\n        ntuples.vardim = convertToFloatArray(dataValue.split(ntuplesSeparator));\n      } else if (dataLabel === 'UNITS') {\n        ntuples.units = dataValue.split(ntuplesSeparator);\n      } else if (dataLabel === 'FACTOR') {\n        ntuples.factor = convertToFloatArray(dataValue.split(ntuplesSeparator));\n      } else if (dataLabel === 'FIRST') {\n        ntuples.first = convertToFloatArray(dataValue.split(ntuplesSeparator));\n      } else if (dataLabel === 'LAST') {\n        ntuples.last = convertToFloatArray(dataValue.split(ntuplesSeparator));\n      } else if (dataLabel === 'MIN') {\n        ntuples.min = convertToFloatArray(dataValue.split(ntuplesSeparator));\n      } else if (dataLabel === 'MAX') {\n        ntuples.max = convertToFloatArray(dataValue.split(ntuplesSeparator));\n      } else if (dataLabel === '.NUCLEUS') {\n        if (result.twoD) {\n          result.yType = dataValue.split(ntuplesSeparator)[0];\n        }\n      } else if (dataLabel === 'PAGE') {\n        spectrum.page = dataValue.trim();\n        spectrum.pageValue = parseFloat(dataValue.replace(/^.*=/, ''));\n        spectrum.pageSymbol = spectrum.page.replace(/[=].*/, '');\n        var pageSymbolIndex = ntuples.symbol.indexOf(spectrum.pageSymbol);\n        var unit = '';\n        if (ntuples.units && ntuples.units[pageSymbolIndex]) {\n          unit = ntuples.units[pageSymbolIndex];\n        }\n        if (result.indirectFrequency && unit !== 'PPM') {\n          spectrum.pageValue /= result.indirectFrequency;\n        }\n      } else if (dataLabel === 'RETENTIONTIME') {\n        spectrum.pageValue = parseFloat(dataValue);\n      } else if (isMSField(dataLabel)) {\n        spectrum[convertMSFieldToLabel(dataLabel)] = dataValue;\n      } else if (dataLabel === 'SAMPLEDESCRIPTION') {\n        spectrum.sampleDescription = dataValue;\n      }\n      if (dataLabel.match(options.keepRecordsRegExp)) {\n        if (result.info[dataLabel]) {\n          if (!Array.isArray(result.info[dataLabel])) {\n            result.info[dataLabel] = [result.info[dataLabel]];\n          }\n          result.info[dataLabel].push(dataValue.trim());\n        } else {\n          result.info[dataLabel] = dataValue.trim();\n        }\n      }\n    }\n\n    if (result.profiling) {\n      result.profiling.push({\n        action: 'Finished parsing',\n        time: Date.now() - start\n      });\n    }\n\n    if (Object.keys(ntuples).length > 0) {\n      var newNtuples = [];\n      var keys = Object.keys(ntuples);\n      for (let i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var values = ntuples[key];\n        for (let j = 0; j < values.length; j++) {\n          if (!newNtuples[j]) newNtuples[j] = {};\n          newNtuples[j][key] = values[j];\n        }\n      }\n      result.ntuples = newNtuples;\n    }\n\n    if (result.twoD && wantXY) {\n      add2D(result, options);\n      if (result.profiling) {\n        result.profiling.push({\n          action: 'Finished countour plot calculation',\n          time: Date.now() - start\n        });\n      }\n      if (!options.keepSpectra) {\n        delete result.spectra;\n      }\n    }\n\n    if (options.chromatogram) {\n      options.xy = true;\n    }\n\n    if (options.xy && wantXY) {\n      // the spectraData should not be a oneD array but an object with x and y\n      if (spectra.length > 0) {\n        for (let i = 0; i < spectra.length; i++) {\n          spectrum = spectra[i];\n          if (spectrum.data.length > 0) {\n            for (let j = 0; j < spectrum.data.length; j++) {\n              var data = spectrum.data[j];\n              var newData = {\n                x: new Array(data.length / 2),\n                y: new Array(data.length / 2)\n              };\n              for (var k = 0; k < data.length; k = k + 2) {\n                newData.x[k / 2] = data[k];\n                newData.y[k / 2] = data[k + 1];\n              }\n              spectrum.data[j] = newData;\n            }\n          }\n        }\n      }\n    }\n\n    // maybe it is a GC (HPLC) / MS. In this case we add a new format\n    if (options.chromatogram) {\n      if (result.spectra.length > 1) {\n        complexChromatogram(result);\n      } else {\n        simpleChromatogram(result);\n      }\n      if (result.profiling) {\n        result.profiling.push({\n          action: 'Finished chromatogram calculation',\n          time: Date.now() - start\n        });\n      }\n    }\n\n    if (result.profiling) {\n      result.profiling.push({\n        action: 'Total time',\n        time: Date.now() - start\n      });\n    }\n\n    return result;\n  }\n\n  function convertMSFieldToLabel(value) {\n    return value.toLowerCase().replace(/[^a-z0-9]/g, '');\n  }\n\n  function isMSField(dataLabel) {\n    return GC_MS_FIELDS.indexOf(dataLabel) !== -1;\n  }\n\n  function complexChromatogram(result) {\n    var spectra = result.spectra;\n    var length = spectra.length;\n    var chromatogram = {\n      times: new Array(length),\n      series: {\n        ms: {\n          dimension: 2,\n          data: new Array(length)\n        }\n      }\n    };\n\n    var existingGCMSFields = [];\n    for (let i = 0; i < GC_MS_FIELDS.length; i++) {\n      var label = convertMSFieldToLabel(GC_MS_FIELDS[i]);\n      if (spectra[0][label]) {\n        existingGCMSFields.push(label);\n        chromatogram.series[label] = {\n          dimension: 1,\n          data: new Array(length)\n        };\n      }\n    }\n\n    for (let i = 0; i < length; i++) {\n      var spectrum = spectra[i];\n      chromatogram.times[i] = spectrum.pageValue;\n      for (let j = 0; j < existingGCMSFields.length; j++) {\n        chromatogram.series[existingGCMSFields[j]].data[i] = parseFloat(\n          spectrum[existingGCMSFields[j]]\n        );\n      }\n      if (spectrum.data) {\n        chromatogram.series.ms.data[i] = [\n          spectrum.data[0].x,\n          spectrum.data[0].y\n        ];\n      }\n    }\n    result.chromatogram = chromatogram;\n  }\n\n  function simpleChromatogram(result) {\n    var data = result.spectra[0].data[0];\n    result.chromatogram = {\n      times: data.x.slice(),\n      series: {\n        intensity: {\n          dimension: 1,\n          data: data.y.slice()\n        }\n      }\n    };\n  }\n\n  function prepareSpectrum(result, spectrum) {\n    if (!spectrum.xFactor) spectrum.xFactor = 1;\n    if (!spectrum.yFactor) spectrum.yFactor = 1;\n    if (spectrum.observeFrequency) {\n      if (spectrum.xUnit && spectrum.xUnit.toUpperCase() === 'HZ') {\n        spectrum.xUnit = 'PPM';\n        spectrum.xFactor = spectrum.xFactor / spectrum.observeFrequency;\n        spectrum.firstX = spectrum.firstX / spectrum.observeFrequency;\n        spectrum.lastX = spectrum.lastX / spectrum.observeFrequency;\n        spectrum.deltaX = spectrum.deltaX / spectrum.observeFrequency;\n      }\n    }\n    if (spectrum.shiftOffsetVal) {\n      var shift = spectrum.firstX - spectrum.shiftOffsetVal;\n      spectrum.firstX = spectrum.firstX - shift;\n      spectrum.lastX = spectrum.lastX - shift;\n    }\n  }\n\n  function getMedian(data) {\n    data = data.sort(compareNumbers);\n    var l = data.length;\n    return data[Math.floor(l / 2)];\n  }\n\n  function compareNumbers(a, b) {\n    return a - b;\n  }\n\n  function convertTo3DZ(spectra) {\n    var minZ = spectra[0].data[0][0];\n    var maxZ = minZ;\n    var ySize = spectra.length;\n    var xSize = spectra[0].data[0].length / 2;\n    var z = new Array(ySize);\n    for (let i = 0; i < ySize; i++) {\n      z[i] = new Array(xSize);\n      var xVector = spectra[i].data[0];\n      for (let j = 0; j < xSize; j++) {\n        var value = xVector[j * 2 + 1];\n        z[i][j] = value;\n        if (value < minZ) minZ = value;\n        if (value > maxZ) maxZ = value;\n      }\n    }\n\n    const firstX = spectra[0].data[0][0];\n    const lastX = spectra[0].data[0][spectra[0].data[0].length - 2]; // has to be -2 because it is a 1D array [x,y,x,y,...]\n    const firstY = spectra[0].pageValue;\n    const lastY = spectra[ySize - 1].pageValue;\n\n    // Because the min / max value are the only information about the matrix if we invert\n    // min and max we need to invert the array\n    if (firstX > lastX) {\n      for (let spectrum of z) {\n        spectrum.reverse();\n      }\n    }\n    if (firstY > lastY) {\n      z.reverse();\n    }\n\n    return {\n      z: z,\n      minX: Math.min(firstX, lastX),\n      maxX: Math.max(firstX, lastX),\n      minY: Math.min(firstY, lastY),\n      maxY: Math.max(firstY, lastY),\n      minZ: minZ,\n      maxZ: maxZ,\n      noise: getMedian(z[0].map(Math.abs))\n    };\n  }\n\n  function add2D(result, options) {\n    var zData = convertTo3DZ(result.spectra);\n    if (!options.noContour) {\n      result.contourLines = generateContourLines(zData, options);\n      delete zData.z;\n    }\n    result.minMax = zData;\n  }\n\n  function generateContourLines(zData, options) {\n    var noise = zData.noise;\n    var z = zData.z;\n    var povarHeight0, povarHeight1, povarHeight2, povarHeight3;\n    var isOver0, isOver1, isOver2, isOver3;\n    var nbSubSpectra = z.length;\n    var nbPovars = z[0].length;\n    var pAx, pAy, pBx, pBy;\n\n    var x0 = zData.minX;\n    var xN = zData.maxX;\n    var dx = (xN - x0) / (nbPovars - 1);\n    var y0 = zData.minY;\n    var yN = zData.maxY;\n    var dy = (yN - y0) / (nbSubSpectra - 1);\n    var minZ = zData.minZ;\n    var maxZ = zData.maxZ;\n\n    // System.out.prvarln('y0 '+y0+' yN '+yN);\n    // -------------------------\n    // Povars attribution\n    //\n    // 0----1\n    // |  / |\n    // | /  |\n    // 2----3\n    //\n    // ---------------------d------\n\n    var iter = options.nbContourLevels * 2;\n    var contourLevels = new Array(iter);\n    var lineZValue;\n    for (var level = 0; level < iter; level++) {\n      // multiply by 2 for positif and negatif\n      var contourLevel = {};\n      contourLevels[level] = contourLevel;\n      var side = level % 2;\n      var factor =\n        (maxZ - options.noiseMultiplier * noise) *\n        Math.exp((level >> 1) - options.nbContourLevels);\n      if (side === 0) {\n        lineZValue = factor + options.noiseMultiplier * noise;\n      } else {\n        lineZValue = 0 - factor - options.noiseMultiplier * noise;\n      }\n      var lines = [];\n      contourLevel.zValue = lineZValue;\n      contourLevel.lines = lines;\n\n      if (lineZValue <= minZ || lineZValue >= maxZ) continue;\n\n      for (var iSubSpectra = 0; iSubSpectra < nbSubSpectra - 1; iSubSpectra++) {\n        var subSpectra = z[iSubSpectra];\n        var subSpectraAfter = z[iSubSpectra + 1];\n        for (var povar = 0; povar < nbPovars - 1; povar++) {\n          povarHeight0 = subSpectra[povar];\n          povarHeight1 = subSpectra[povar + 1];\n          povarHeight2 = subSpectraAfter[povar];\n          povarHeight3 = subSpectraAfter[povar + 1];\n\n          isOver0 = povarHeight0 > lineZValue;\n          isOver1 = povarHeight1 > lineZValue;\n          isOver2 = povarHeight2 > lineZValue;\n          isOver3 = povarHeight3 > lineZValue;\n\n          // Example povar0 is over the plane and povar1 and\n          // povar2 are below, we find the varersections and add\n          // the segment\n          if (isOver0 !== isOver1 && isOver0 !== isOver2) {\n            pAx =\n              povar +\n              (lineZValue - povarHeight0) / (povarHeight1 - povarHeight0);\n            pAy = iSubSpectra;\n            pBx = povar;\n            pBy =\n              iSubSpectra +\n              (lineZValue - povarHeight0) / (povarHeight2 - povarHeight0);\n            lines.push(pAx * dx + x0);\n            lines.push(pAy * dy + y0);\n            lines.push(pBx * dx + x0);\n            lines.push(pBy * dy + y0);\n          }\n          // remove push does not help !!!!\n          if (isOver3 !== isOver1 && isOver3 !== isOver2) {\n            pAx = povar + 1;\n            pAy =\n              iSubSpectra +\n              1 -\n              (lineZValue - povarHeight3) / (povarHeight1 - povarHeight3);\n            pBx =\n              povar +\n              1 -\n              (lineZValue - povarHeight3) / (povarHeight2 - povarHeight3);\n            pBy = iSubSpectra + 1;\n            lines.push(pAx * dx + x0);\n            lines.push(pAy * dy + y0);\n            lines.push(pBx * dx + x0);\n            lines.push(pBy * dy + y0);\n          }\n          // test around the diagonal\n          if (isOver1 !== isOver2) {\n            pAx =\n              (povar +\n                1 -\n                (lineZValue - povarHeight1) / (povarHeight2 - povarHeight1)) *\n                dx +\n              x0;\n            pAy =\n              (iSubSpectra +\n                (lineZValue - povarHeight1) / (povarHeight2 - povarHeight1)) *\n                dy +\n              y0;\n            if (isOver1 !== isOver0) {\n              pBx =\n                povar +\n                1 -\n                (lineZValue - povarHeight1) / (povarHeight0 - povarHeight1);\n              pBy = iSubSpectra;\n              lines.push(pAx);\n              lines.push(pAy);\n              lines.push(pBx * dx + x0);\n              lines.push(pBy * dy + y0);\n            }\n            if (isOver2 !== isOver0) {\n              pBx = povar;\n              pBy =\n                iSubSpectra +\n                1 -\n                (lineZValue - povarHeight2) / (povarHeight0 - povarHeight2);\n              lines.push(pAx);\n              lines.push(pAy);\n              lines.push(pBx * dx + x0);\n              lines.push(pBy * dy + y0);\n            }\n            if (isOver1 !== isOver3) {\n              pBx = povar + 1;\n              pBy =\n                iSubSpectra +\n                (lineZValue - povarHeight1) / (povarHeight3 - povarHeight1);\n              lines.push(pAx);\n              lines.push(pAy);\n              lines.push(pBx * dx + x0);\n              lines.push(pBy * dy + y0);\n            }\n            if (isOver2 !== isOver3) {\n              pBx =\n                povar +\n                (lineZValue - povarHeight2) / (povarHeight3 - povarHeight2);\n              pBy = iSubSpectra + 1;\n              lines.push(pAx);\n              lines.push(pAy);\n              lines.push(pBx * dx + x0);\n              lines.push(pBy * dy + y0);\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      minX: zData.minX,\n      maxX: zData.maxX,\n      minY: zData.minY,\n      maxY: zData.maxY,\n      segments: contourLevels\n    };\n  }\n\n  function fastParseXYData(spectrum, value) {\n    // TODO need to deal with result\n    //  console.log(value);\n    // we check if deltaX is defined otherwise we calculate it\n\n    var yFactor = spectrum.yFactor;\n    var deltaX = spectrum.deltaX;\n\n    spectrum.isXYdata = true;\n    // TODO to be improved using 2 array {x:[], y:[]}\n    var currentData = [];\n    spectrum.data = [currentData];\n\n    var currentX = spectrum.firstX;\n    var currentY = spectrum.firstY;\n\n    // we skip the first line\n    //\n    var endLine = false;\n    var ascii;\n    let i = 0;\n    for (; i < value.length; i++) {\n      ascii = value.charCodeAt(i);\n      if (ascii === 13 || ascii === 10) {\n        endLine = true;\n      } else {\n        if (endLine) break;\n      }\n    }\n\n    // we proceed taking the i after the first line\n    var newLine = true;\n    var isDifference = false;\n    var isLastDifference = false;\n    var lastDifference = 0;\n    var isDuplicate = false;\n    var inComment = false;\n    var currentValue = 0; // can be a difference or a duplicate\n    var lastValue = 0; // must be the real last value\n    var isNegative = false;\n    var inValue = false;\n    var skipFirstValue = false;\n    var decimalPosition = 0;\n    for (; i <= value.length; i++) {\n      if (i === value.length) ascii = 13;\n      else ascii = value.charCodeAt(i);\n      if (inComment) {\n        // we should ignore the text if we are after $$\n        if (ascii === 13 || ascii === 10) {\n          newLine = true;\n          inComment = false;\n        }\n      } else {\n        // when is it a new value ?\n        // when it is not a digit, . or comma\n        // it is a number that is either new or we continue\n        if (ascii <= 57 && ascii >= 48) {\n          // a number\n          inValue = true;\n          if (decimalPosition > 0) {\n            currentValue += (ascii - 48) / Math.pow(10, decimalPosition++);\n          } else {\n            currentValue *= 10;\n            currentValue += ascii - 48;\n          }\n        } else if (ascii === 44 || ascii === 46) {\n          // a \",\" or \".\"\n          inValue = true;\n          decimalPosition++;\n        } else {\n          if (inValue) {\n            // need to process the previous value\n            if (newLine) {\n              newLine = false; // we don't check the X value\n              // console.log(\"NEW LINE\",isDifference, lastDifference);\n              // if new line and lastDifference, the first value is just a check !\n              // that we don't check ...\n              if (isLastDifference) skipFirstValue = true;\n            } else {\n              // need to deal with duplicate and differences\n              if (skipFirstValue) {\n                skipFirstValue = false;\n              } else {\n                if (isDifference) {\n                  lastDifference = isNegative ? 0 - currentValue : currentValue;\n                  isLastDifference = true;\n                  isDifference = false;\n                } else if (!isDuplicate) {\n                  lastValue = isNegative ? 0 - currentValue : currentValue;\n                }\n                var duplicate = isDuplicate ? currentValue - 1 : 1;\n                for (var j = 0; j < duplicate; j++) {\n                  if (isLastDifference) {\n                    currentY += lastDifference;\n                  } else {\n                    currentY = lastValue;\n                  }\n                  currentData.push(currentX);\n                  currentData.push(currentY * yFactor);\n                  currentX += deltaX;\n                }\n              }\n            }\n            isNegative = false;\n            currentValue = 0;\n            decimalPosition = 0;\n            inValue = false;\n            isDuplicate = false;\n          }\n\n          // positive SQZ digits @ A B C D E F G H I (ascii 64-73)\n          if (ascii < 74 && ascii > 63) {\n            inValue = true;\n            isLastDifference = false;\n            currentValue = ascii - 64;\n          } else if (ascii > 96 && ascii < 106) {\n            // negative SQZ digits a b c d e f g h i (ascii 97-105)\n            inValue = true;\n            isLastDifference = false;\n            currentValue = ascii - 96;\n            isNegative = true;\n          } else if (ascii === 115) {\n            // DUP digits S T U V W X Y Z s (ascii 83-90, 115)\n            inValue = true;\n            isDuplicate = true;\n            currentValue = 9;\n          } else if (ascii > 82 && ascii < 91) {\n            inValue = true;\n            isDuplicate = true;\n            currentValue = ascii - 82;\n          } else if (ascii > 73 && ascii < 83) {\n            // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n            inValue = true;\n            isDifference = true;\n            currentValue = ascii - 73;\n          } else if (ascii > 105 && ascii < 115) {\n            // negative DIF digits j k l m n o p q r (ascii 106-114)\n            inValue = true;\n            isDifference = true;\n            currentValue = ascii - 105;\n            isNegative = true;\n          } else if (ascii === 36 && value.charCodeAt(i + 1) === 36) {\n            // $ sign, we need to check the next one\n            inValue = true;\n            inComment = true;\n          } else if (ascii === 37) {\n            // positive DIF digits % J K L M N O P Q R (ascii 37, 74-82)\n            inValue = true;\n            isDifference = true;\n            currentValue = 0;\n            isNegative = false;\n          } else if (ascii === 45) {\n            // a \"-\"\n            // check if after there is a number, decimal or comma\n            var ascii2 = value.charCodeAt(i + 1);\n            if (\n              (ascii2 >= 48 && ascii2 <= 57) ||\n              ascii2 === 44 ||\n              ascii2 === 46\n            ) {\n              inValue = true;\n              if (!newLine) isLastDifference = false;\n              isNegative = true;\n            }\n          } else if (ascii === 13 || ascii === 10) {\n            newLine = true;\n            inComment = false;\n          }\n          // and now analyse the details ... space or tabulation\n          // if \"+\" we just don't care\n        }\n      }\n    }\n  }\n\n  function parseXYA(spectrum, value) {\n    var removeSymbolRegExp = /(\\(+|\\)+|<+|>+|\\s+)/g;\n\n    spectrum.isXYAdata = true;\n    var values;\n    var currentData = [];\n    spectrum.data = [currentData];\n\n    var lines = value.split(/,? *,?[;\\r\\n]+ */);\n\n    for (let i = 1; i < lines.length; i++) {\n      values = lines[i]\n        .trim()\n        .replace(removeSymbolRegExp, '')\n        .split(',');\n      currentData.push(parseFloat(values[0]));\n      currentData.push(parseFloat(values[1]));\n    }\n  }\n\n  function parsePeakTable(spectrum, value, result) {\n    var removeCommentRegExp = /\\$\\$.*/;\n    var peakTableSplitRegExp = /[,\\t ]+/;\n\n    spectrum.isPeaktable = true;\n    var values;\n    var currentData = [];\n    spectrum.data = [currentData];\n\n    // counts for around 20% of the time\n    var lines = value.split(/,? *,?[;\\r\\n]+ */);\n\n    for (let i = 1; i < lines.length; i++) {\n      values = lines[i]\n        .trim()\n        .replace(removeCommentRegExp, '')\n        .split(peakTableSplitRegExp);\n      if (values.length % 2 === 0) {\n        for (let j = 0; j < values.length; j = j + 2) {\n          // takes around 40% of the time to add and parse the 2 values nearly exclusively because of parseFloat\n          currentData.push(parseFloat(values[j]) * spectrum.xFactor);\n          currentData.push(parseFloat(values[j + 1]) * spectrum.yFactor);\n        }\n      } else {\n        result.logs.push(`Format error: ${values}`);\n      }\n    }\n  }\n\n  return convert;\n}\n\nvar convert = getConverter();\n\nfunction JcampConverter(input, options, useWorker) {\n  if (typeof options === 'boolean') {\n    useWorker = options;\n    options = {};\n  }\n  if (useWorker) {\n    return postToWorker(input, options);\n  } else {\n    return convert(input, options);\n  }\n}\n\nvar stamps = {};\nvar worker;\n\nfunction postToWorker(input, options) {\n  if (!worker) {\n    createWorker();\n  }\n  return new Promise(function (resolve) {\n    var stamp = `${Date.now()}${Math.random()}`;\n    stamps[stamp] = resolve;\n    worker.postMessage(\n      JSON.stringify({\n        stamp: stamp,\n        input: input,\n        options: options\n      })\n    );\n  });\n}\n\nfunction createWorker() {\n  var workerURL = URL.createObjectURL(\n    new Blob(\n      [`var getConverter =${getConverter.toString()};var convert = getConverter(); onmessage = function (event) { var data = JSON.parse(event.data); postMessage(JSON.stringify({stamp: data.stamp, output: convert(data.input, data.options)})); };`],\n      { type: 'application/javascript' }\n    )\n  );\n  worker = new Worker(workerURL);\n  URL.revokeObjectURL(workerURL);\n  worker.addEventListener('message', function (event) {\n    var data = JSON.parse(event.data);\n    var stamp = data.stamp;\n    if (stamps[stamp]) {\n      stamps[stamp](data.output);\n    }\n  });\n}\n\nfunction createTree(jcamp, options = {}) {\n  const { flatten = false } = options;\n  if (typeof jcamp !== 'string') {\n    throw new TypeError('the JCAMP should be a string');\n  }\n\n  let lines = jcamp.split(/[\\r\\n]+/);\n  let flat = [];\n  let stack = [];\n  let result = [];\n  let current;\n  let ntupleLevel = 0;\n\n  let spaces = jcamp.includes('## ');\n\n  for (var i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    let labelLine = spaces ? line.replace(/ /g, '') : line;\n\n    if (labelLine.substring(0, 9) === '##NTUPLES') {\n      ntupleLevel++;\n    }\n\n    if (labelLine.substring(0, 7) === '##TITLE') {\n      let title = [labelLine.substring(8).trim()];\n      for (let j = i + 1; j < lines.length; j++) {\n        if (lines[j].startsWith('##')) {\n          break;\n        } else {\n          title.push(lines[j].trim());\n        }\n      }\n      stack.push({\n        title: title.join('\\n'),\n        jcamp: `${line}\\n`,\n        children: []\n      });\n      current = stack[stack.length - 1];\n      flat.push(current);\n    } else if (labelLine.substring(0, 5) === '##END' && ntupleLevel === 0) {\n      current.jcamp += `${line}\\n`;\n      var finished = stack.pop();\n      if (stack.length !== 0) {\n        current = stack[stack.length - 1];\n        current.children.push(finished);\n      } else {\n        current = undefined;\n        result.push(finished);\n      }\n    } else if (current && current.jcamp) {\n      current.jcamp += `${line}\\n`;\n      var match = labelLine.match(/^##(.*?)=(.+)/);\n      if (match) {\n        var dataLabel = match[1].replace(/[ _-]/g, '').toUpperCase();\n        if (dataLabel === 'DATATYPE') {\n          current.dataType = match[2].trim();\n        }\n      }\n    }\n\n    if (labelLine.substring(0, 5) === '##END' && ntupleLevel > 0) {\n      ntupleLevel--;\n    }\n  }\n  if (flatten) {\n    flat.forEach((entry) => {\n      entry.children = undefined;\n    });\n    return flat;\n  } else {\n    return result;\n  }\n}\n\nmodule.exports = {\n  convert: JcampConverter,\n  createTree: createTree\n};\n","export default function sortX(points, options = {}) {\n  const { x, y } = points;\n  const { reverse = false } = options;\n\n  var sortFunc;\n  if (!reverse) {\n    sortFunc = (a, b) => a.x - b.x;\n  } else {\n    sortFunc = (a, b) => b.x - a.x;\n  }\n\n  var grouped = x\n    .map((val, index) => ({\n      x: val,\n      y: y[index]\n    }))\n    .sort(sortFunc);\n\n  var response = { x: x.slice(), y: y.slice() };\n  for (var i = 0; i < x.length; i++) {\n    response.x[i] = grouped[i].x;\n    response.y[i] = grouped[i].y;\n  }\n\n  return response;\n}\n","'use strict';\n\n/**\n * In place modification of the 2 arrays to make X unique and sum the Y if X has the same value\n * @param xs\n * @param ys\n */\n\nfunction uniqueX(xs, ys) {\n    if (xs.length < 2) return;\n\n    var current = xs[0];\n    var counter = 0;\n\n    for (var i = 1; i < xs.length; i++) {\n        if (current !== xs[i]) {\n            counter++;\n            current = xs[i];\n            xs[counter] = xs[i];\n            if (i !== counter) {\n                ys[counter] = 0;\n            }\n        }\n        if (i !== counter) {\n            ys[counter] += ys[i];\n        }\n\n    }\n\n    xs.length = counter + 1;\n    ys.length = counter + 1;\n}\n\nmodule.exports = uniqueX;\n","import uniqueXFunction from 'ml-arrayxy-uniquex';\n\n/**\n * Parse a text-file and convert it to an array of XY points\n * @param {string} text - csv or tsv strings\n * @param {object} [options]\n * @param {string} [options.arrayType = 'xyxy'] - xxyy or xyxy\n * * 'xxyy' `[[x1,x2,x3,...],[y1,y2,y2,...]]`\n * * 'xyxy' `[[x1,y1],[x2,y2],[x3,y3], ...]]`\n * @param {boolean} [options.normalize = false] - will set the maximum value to 1\n * @param {boolean} [options.uniqueX = false] - Make the X values unique (works only with 'xxyy' format). If the X value is repeated the sum of Y is done.\n * @param {number} [options.xColumn = 0] - A number that specifies the x column\n * @param {number} [options.yColumn = 1] - A number that specifies the y column\n * @param {number} [options.maxNumberColumns = (Math.max(xColumn, yColumn)+1)] - A number that specifies the maximum number of y columns\n * @param {number} [options.minNumberColumns = (Math.max(xColumn, yColumn)+1)] - A number that specifies the minimum number of y columns\n * @param {boolean} [options.keepInfo = false] - shoud we keep the non numeric lines. In this case the system will return an object {data, info}\n * @return {Array<Array<number>>} - check the 'arrayType' option\n */\nexport function parseXY(text, options = {}) {\n  const {\n    normalize = false,\n    uniqueX = false,\n    arrayType = 'xyxy',\n    xColumn = 0,\n    yColumn = 1,\n    keepInfo = false,\n    maxNumberColumns = Math.max(xColumn, yColumn) + 1,\n    minNumberColumns = Math.max(xColumn, yColumn) + 1\n  } = options;\n\n  var lines = text.split(/[\\r\\n]+/);\n\n  if (arrayType !== 'xxyy' && arrayType !== 'xyxy') {\n    throw new Error(`unsupported arrayType (${arrayType})`);\n  }\n\n  var maxY = Number.MIN_VALUE;\n  var result = [[], []];\n  var info = [];\n  for (var l = 0; l < lines.length; l++) {\n    var line = lines[l].trim();\n    // we will consider only lines that contains only numbers\n    if (line.match(/[0-9]+/) && line.match(/^[0-9eE,;. \\t+-]+$/)) {\n      var fields = line.split(/,[; \\t]+|[; \\t]+/);\n      if (fields.length === 1) {\n        fields = line.split(/[,; \\t]+/);\n      }\n      if (\n        fields &&\n                fields.length >= minNumberColumns &&\n                fields.length <= maxNumberColumns\n      ) {\n        let x = parseFloat(fields[xColumn].replace(',', '.'));\n        let y = parseFloat(fields[yColumn].replace(',', '.'));\n\n        if (y > maxY) maxY = y;\n        result[0].push(x);\n        result[1].push(y);\n      }\n    } else if (line) {\n      info.push({ position: result[0].length, value: line });\n    }\n  }\n\n  if (normalize) {\n    for (var i = 0; i < result[0].length; i++) {\n      result[1][i] /= maxY;\n    }\n  }\n\n  if (uniqueX) {\n    uniqueXFunction(result[0], result[1]);\n  }\n\n  if (arrayType === 'xyxy') {\n    var newResult = [];\n    for (let i = 0; i < result[0].length; i++) {\n      newResult.push([result[0][i], result[1][i]]);\n    }\n    result = newResult;\n  }\n\n  if (!keepInfo) return result;\n\n  return {\n    info,\n    data: result\n  };\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar min = _interopDefault(require('ml-array-min'));\nvar max = _interopDefault(require('ml-array-max'));\nvar mlGsd = require('ml-gsd');\nvar jcampconverter = require('jcampconverter');\nvar sortX = _interopDefault(require('ml-array-xy-sort-x'));\nvar xyParser = require('xy-parser');\n\nfunction getAnnotations(spectrum, options = {}) {\n  const { fillColor = 'green', strokeColor = 'red', creationFct } = options;\n  const peaks = spectrum.peaks;\n  if (!peaks) return [];\n  let annotations = peaks.map(peak => {\n    var annotation = {\n      line: 1,\n      type: 'rect',\n      strokeColor: strokeColor,\n      strokeWidth: 0,\n      fillColor: fillColor\n    };\n    if (creationFct) {\n      creationFct(annotation, peak);\n    }\n    oneAnnotation(annotation, peak);\n    return annotation;\n  });\n\n  return annotations;\n}\n\nfunction oneAnnotation(annotation, peak) {\n  annotation.label = [\n    {\n      text: peak.kind,\n      size: '18px',\n      anchor: 'middle',\n      color: 'red',\n      position: {\n        x: peak.wavelength,\n        y: peak.intensity,\n        dy: '-15px'\n      }\n    }\n  ];\n  annotation.position = [\n    {\n      x: peak.wavelength,\n      y: peak.intensity,\n      dy: '-10px',\n      dx: '-1px'\n    },\n    {\n      x: peak.wavelength,\n      y: peak.intensity,\n      dy: '-5px',\n      dx: '1px'\n    }\n  ];\n}\n\n/**\n *\n * @param {Spectrum} spectrum\n * @param {object} peak\n */\n\nfunction addPeak(spectrum, peak = {}) {\n  if (!peak.wavelength) {\n    throw new Error('addPeak: peak mush have wavelength property');\n  }\n  const { wavelength, intensity } = peak;\n\n  for (let existing of spectrum.peaks) {\n    if (Number(existing.wavelength) === wavelength) return existing;\n  }\n  spectrum.peaks.push({\n    wavelength: wavelength,\n    intensity: intensity,\n    kind: getPeakKind(intensity, spectrum.minIntensity, spectrum.maxIntensity)\n  });\n  return peak;\n}\n\nfunction getPeakKind(intensity, minIntensity, maxIntensity) {\n  var position = intensity / (maxIntensity - minIntensity);\n  if (position < 0.33) {\n    return 'w';\n  } else if (position < 0.66) {\n    return 'm';\n  }\n  return 'S';\n}\n\n/**\n *\n * @param {Spectrum} spectrum\n * @param {number} targetWavelength\n * @param {object} [options]\n * @param {number} [options.range=0] Search in a range around the targetWavelength\n * @param {boolean} [options.optimize=false] Search for the closest peak to the targetWavelength\n */\n\nfunction peakPicking(spectrum, targetWavelength, options = {}) {\n  const { range = 0, optimize = false } = options;\n\n  // find the peak that is the closest to the click\n  let bestPeak = getClosest(spectrum, targetWavelength);\n\n  if (optimize) {\n    findClosest(spectrum, bestPeak);\n  } else if (range) {\n    bestInRange(spectrum, bestPeak, targetWavelength, range);\n  }\n\n  return addPeak(spectrum, bestPeak);\n}\n\nfunction getClosest(spectrum, targetWavelength) {\n  let bestPeak = {\n    intensity: spectrum.intensity[0],\n    wavelength: spectrum.wavelength[0],\n    index: 0\n  };\n\n  let error = Math.abs(targetWavelength - bestPeak.wavelength);\n  for (let i = 1; i < spectrum.wavelength.length; i++) {\n    let newError = Math.abs(targetWavelength - spectrum.wavelength[i]);\n    if (newError < error) {\n      error = newError;\n      setBestPeak(spectrum, bestPeak, i);\n    }\n  }\n  return bestPeak;\n}\n\nfunction bestInRange(spectrum, bestPeak, targetWavelength, range) {\n  // we search the minimum based on wavelength +/- range\n  for (let i = 0; i < spectrum.wavelength.length; i++) {\n    if (Math.abs(spectrum.wavelength[i] - targetWavelength) <= range) {\n      if (spectrum.intensity[i] > bestPeak.intensity) {\n        setBestPeak(spectrum, bestPeak, i);\n      }\n    }\n  }\n}\n\nfunction findClosest(spectrum, bestPeak) {\n  let index = bestPeak.index;\n  let previousIndex;\n  while (index !== previousIndex) {\n    previousIndex = index;\n    if (index > 0 && spectrum.intensity[index - 1] > bestPeak.intensity) {\n      index--;\n      setBestPeak(spectrum, bestPeak, index);\n    } else if (\n      index < spectrum.wavelength.length - 1 &&\n      spectrum.intensity[index + 1] > bestPeak.intensity\n    ) {\n      index++;\n      setBestPeak(spectrum, bestPeak, index);\n    }\n  }\n}\n\nfunction setBestPeak(spectrum, bestPeak, index) {\n  bestPeak.index = index;\n  bestPeak.wavelength = spectrum.wavelength[index];\n  bestPeak.intensity = spectrum.intensity[index];\n}\n\n/**\n *\n * @param {*} spectrum\n * @param {object} [options={}]\n * @param {number} [options.fromWavelength=0]\n * @param {number} [options.toWavelength=5000]\n * @param {number} [options.noiseLevel=0.01] - Specify the level of the noise\n * @param {number} [options.minMaxRatio=0.05] - Threshold to determine if a given peak should be considered as a noise\n * @param {boolean} [options.replaceExisting=true] - Replace existing peaks\n */\n\nfunction autoPeakPicking(spectrum, options = {}) {\n  const {\n    noiseLevel = 0.001,\n    minMaxRatio = 0.05,\n    fromWavelength = 0,\n    toWavelength = 5000,\n    replaceExisting = true\n  } = options;\n\n  let peaks = mlGsd.gsd(spectrum.wavelength, spectrum.absorbance, {\n    noiseLevel,\n    minMaxRatio,\n    realTopDetection: true,\n    maxCriteria: true,\n    smoothY: false,\n    sgOptions: { windowSize: 7, polynomial: 3 }\n  });\n\n  peaks = peaks.filter(\n    (peak) => peak.x >= fromWavelength && peak.x <= toWavelength\n  );\n\n  if (replaceExisting) {\n    while (spectrum.peaks.length) {\n      spectrum.peaks.pop();\n    }\n  }\n\n  peakLoop: for (let peak of peaks) {\n    for (let existing of spectrum.peaks) {\n      if (Number(existing.wavelength) === Number(peak.x)) continue peakLoop;\n    }\n    addPeak(spectrum, {\n      wavelength: peak.x,\n      absorbance: peak.y\n    });\n  }\n}\n\n/**\n * Class allowing manipulate one Raman spectrum\n * @class spectrum\n * @param {object} [json={}] - object containing a spectrum\n * @param {Array} [json.wavelength=[]] - wavelength\n * @param {Array} [json.intensity=[]] - intensity values\n */\nclass Spectrum {\n  constructor(json) {\n    this.wavelength = json.wavelength || [];\n    this.intensity = json.intensity || [];\n    this.peaks = [];\n    check(this);\n  }\n\n  /**\n   *\n   * @param {Array} [peaks=[]] array of peaks. Peaks are composed of transmittance, wavelength, kind\n   */\n  setPeaks(peaks = []) {\n    this.peaks = peaks;\n  }\n\n  peakPicking(targetWavelength, options = {}) {\n    peakPicking(this, targetWavelength, options);\n  }\n\n  getData() {\n    return { x: this.wavelength, y: this.intensity };\n  }\n}\n\nSpectrum.prototype.getAnnotations = function(options) {\n  return getAnnotations(this, options);\n};\n\nSpectrum.prototype.autoPeakPicking = function(options) {\n  return autoPeakPicking(this, options);\n};\n\nfunction check(spectrum) {\n  if (spectrum.wavelength.length > 0) {\n    spectrum.minWavelength = min(spectrum.wavelength);\n  }\n  if (spectrum.wavelength.length > 0) {\n    spectrum.maxWavelength = max(spectrum.wavelength);\n  }\n  if (spectrum.intensity.length > 0) {\n    spectrum.minIntensity = min(spectrum.intensity);\n  }\n  if (spectrum.intensity.length > 0) {\n    spectrum.maxIntensity = max(spectrum.intensity);\n  }\n}\n\n/**\n * Creates a new Chromatogram element based in a JCAMP string\n * @param {string} jcamp - String containing the JCAMP data\n * @return {Spectrum} - New class element with the given data\n */\nfunction fromJcamp(jcamp) {\n  const data = jcampconverter.convert(jcamp, { xy: true });\n  let spectrum = data.spectra[0].data[0];\n  spectrum = sortX(spectrum);\n  return new Spectrum({\n    wavelength: spectrum.x,\n    intensity: spectrum.y\n  });\n}\n\n/**\n * Creates a new Chromatogram element based in a Txt string\n * @param {string} text - String containing the data as CSV or TSV\n * @param {object} [options] - Options object for the parser\n * @param {string} [options.kind] - Absorbance or Transmisstance\n * @return {Spectrum} - New class element with the given data\n */\nfunction fromText(text, options = {}) {\n  options = Object.assign({}, options, { arrayType: 'xxyy' });\n  const data = xyParser.parseXY(text, options);\n  let spectrum = sortX({ x: data[0], y: data[1] });\n\n  return new Spectrum({\n    wavelength: spectrum.x,\n    intensity: spectrum.y\n  });\n}\n\nexports.Spectrum = Spectrum;\nexports.fromJcamp = fromJcamp;\nexports.fromText = fromText;\n"],"names":["toString","Object","prototype","isAnyArray","object","call","endsWith","min","input","isArray","TypeError","length","i","max","hasOwn","hasOwnProperty","toStr","defineProperty","gOPD","getOwnPropertyDescriptor","arr","Array","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","extend","src","copy","copyIsArray","clone","arguments","deep","compareNumbers","a","b","exports","values","sum","Infinity","l","arithmeticMean","mul","Math","pow","lnsum","log","means","samples","n","percent","alreadySorted","undefined","slice","sort","k","floor","RangeError","r1","r2","half","unbiased","theMean","mean","theVariance","x","sqrt","variance","standardDeviation","quart","q1","ceil","q2","median","q3","pooledVariance","vari","itemCount","itemArray","count","index","indexOf","maxValue","maxIndex","vector1","vector2","mean1","mean2","cov","s2","s3","dev","m2","g","s4","v","eps","weights","weightedVariance","weightedMean","z","w","inPlace","result","standardDev","array","defaultOptions","windowSize","derivative","polynomial","SavitzkyGolay","data","h","Number","isInteger","console","warn","np","ans","fullWeights","hs","constantH","wg1","wg2","d1","d2","getHs","wg","d","center","GramPoly","m","s","GenFact","gf","j","Weight","t","sgOptions","minMaxRatio","broadRatio","maxCriteria","smoothY","realTopDetection","heightFactor","boundaries","derivativeThreshold","gsd","yIn","assign","y","concat","tmp","maxDx","minDx","MAX_VALUE","abs","noiseLevel","getNoiseLevel","yCorrection","dY","ddY","Y","SG","X","dx","maxDdy","maxY","lastMax","lastMin","minddY","intervalL","intervalR","broadMask","minddYLen","intervalLLen","intervalRLen","broadMaskLen","possible","frequency","distanceJ","minDistance","gettingCloser","signals","signalsLen","lastK","width","soft","left","right","yLeft","yRight","height","base","averageDeviations","peakList","alpha","beta","gamma","p","currentPoint","log10","Symbol","species","for","LuDecomposition","matrix","this","LUrowi","LUcolj","kmax","lu","Matrix","checkMatrix","rows","columns","pivotVector","pivotSign","LU","isSingular","col","isSquare","Error","determinant","solve","subMatrixRow","r","hypotenuse","util","getFilled2DArray","SingularValueDecomposition","nu","wantu","wantv","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","swapped","transpose","aux","ks","f","cs","sn","kase","scale","sp","spm1","epm1","sk","ek","c","shift","U","V","e","work","nct","nrt","pp","iter","tol","ii","isMatrix","diag","threshold","scols","Ls","zeros","rightSingularVectors","VL","mmul","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","stdev","l1","l2","dimension","N","cols","theSum","theProduct","sum1","sum2","medians","modes","skew","kurt","m4","standardDeviations","standardErrors","sqrtN","scatter","divisor","scores","zScores","cor","standardize","jj","row","resultRow","sourceRow","isNaN","weightSum","arrayStat","s1","factor","weightedScatter","require$$0","require$$1","Stat","coordArrayToPoints","dimensions","pointsArr","point","coordArrayToCoordMatrix","coordinatesArray","points","coordMatrixToCoordArray","coordMatrix","coodinatesArray","resultMatrix","pointsToCoordArray","applyDotProduct","firstVector","secondVector","largestVector","smallestVector","difference","dotProductApplied","minMax","coordMatrixToPoints","pointsToCoordMatrix","getEquallySpacedData","reverse","from","isFinite","to","temp","numberOfPoints","output","variant","getEquallySpacedSlot","getEquallySpacedSmooth","xLength","step","start","initialOriginalStep","lastOriginalStep","previousX","MIN_VALUE","previousY","nextX","nextY","currentValue","slope","intercept","sumAtMin","sumAtMax","getSlope","x0","y0","x1","y1","main","add","integral","halfStep","lastStep","frontOutsideSpectra","backOutsideSpectra","currentPoints","SNV","std","module","require$$2","outer","vector","to1DArray","rowIndices","columnIndices","rowOut","some","columnOut","column","startRow","endRow","startColumn","endColumn","notAllNumbers","arg","set","get","BaseView","abstractMatrix","MatrixTransposeView","rowIndex","columnIndex","MatrixRowView","MatrixSubView","checkRange","MatrixSelectionView","indices","checkIndices","MatrixColumnView","MatrixFlipRowView","MatrixFlipColumnView","superCtor","newRows","newColumns","newData","newMatrix","empty","fill","rng","random","matrix1","matrix2","klass","apply","callback","size","to2DArray","isRowVector","isColumnVector","isVector","isSymmetric","repeat","rowRep","colRep","setSubMatrix","neg","mulS","getRow","checkRowIndex","getRowVector","rowVector","setRow","checkRowVector","swapRows","row1","row2","getColumn","checkColumnIndex","getColumnVector","columnVector","setColumn","checkColumnVector","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","idx","minIndex","maxRow","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","by","sumByRow","sumByColumn","sumAll","prod","cumulativeSum","dot","other","Bcolj","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m3","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","c1","c2","embed","mat","resultat","blockMult","halfRows","parseInt","halfCols","subMatrix","sub","scaleRows","scaled","arrayUtils","scaleColumns","kroneckerProduct","q","sortRows","compareFunction","sortColumns","subMatrixColumn","selection","trace","transposeView","rowView","columnView","flipRowView","flipColumnView","subMatrixView","selectionView","det","subMatrix0","subMatrix1","subMatrix2","pseudoInverse","EPSILON","svdSolution","SvDecomposition","leftSingularVectors","diagonal","rand","identity","eye","negate","tensorProduct","inplaceOperator","inplaceOperatorScalar","inplaceOperatorMatrix","staticOperator","inplaceMethod","staticMethod","inplaceMethodWithArgs","staticMethodWithArgs","inplaceMethodWithOneArgScalar","inplaceMethodWithOneArgMatrix","inplaceMethodWithOneArg","staticMethodWithOneArg","operators","operator","inplaceOp","eval","fillTemplateFunction","op","inplaceOpS","inplaceOpM","staticOp","methods","method","forEach","mathMethod","push","inplaceMeth","staticMeth","methodsWithArgs","methodWithArg","args","inplaceMethWithArgs","staticMethWithArgs","tmplVar","inplaceMethod2","inplaceMethodS","inplaceMethodM","staticMethod2","template","replace","RegExp","nRows","nColumns","removeRow","splice","addRow","removeColumn","addColumn","assumeSymmetric","EigenvalueDecomposition","tred2","tql2","H","ort","orthes","hqr2","hh","dl1","c3","el1","tst1","high","low","nn","ra","sa","vr","vi","notlast","cdivres","exshift","norm","cdiv","xr","xi","yr","yi","QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","CholeskyDecomposition","positiveDefinite","Lrowj","Lrowk","L","B","leftHandSide","rightHandSide","inv","SVD","EVD","CHO","A","ones","subtract","multiply","dotMultiply","dotDivide","div","exp","dotPow","LM","optimize","func","y_dat","weight","dp","p_min","p_max","opts","iteration","Npar","Npnt","p_old","y_old","X2","X2_old","J","math","MaxIter","epsilon_1","epsilon_4","lambda_0","lambda_UP_fac","lambda_DN_fac","Update_Type","dp_array","Nfit","stop","weight_sq","lm_matx","JtWJ","JtWdy","y_hat","Chi_sq","lambda","hidx","p_try","delta_y","X2_try","JtWdy_th","rho","dX2","length_t","length_y_dat","lm_FD_J","ps","del","lm_Broyden_J","h_t","Jt","algebra","sumOfLorentzians","p2","nL","singleLorentzian","singleGaussian","factor2","optimizeSingleLorentzian","xy","peak","xy2","parseData","percentage","y_data","dt","create","LMOptions","p_init","p_fit","optimizeSingleGaussian","optimizeLorentzianTrain","group","tI","yI","current","currentIndex","nbPoints","optimizeGaussianTrain","optimizeLorentzianSum","optimizeGaussianSum","nbSeries","sampleFunction","lastIndex","sampleX","sampleY","direction","sign","delta","mid","fnType","sampling","error","groups","groupPeaks","peaks","limits","optPeaks","optPeak","upperLimit","lowerLimit","broadLines","maxI","candidates","indexes","fitted","Opt","overlap","nextPeak","optimizePeaks","joinBroadPeaks","broadenPeaks","require$$3","getConverter","ntuplesSeparator","GC_MS_FIELDS","convertToFloatArray","stringArray","floatArray","parseFloat","Spectrum","keepRecordsRegExp","withoutXY","chromatogram","keepSpectra","noContour","nbContourLevels","noiseMultiplier","profiling","convertMSFieldToLabel","toLowerCase","isMSField","dataLabel","prepareSpectrum","spectrum","xFactor","yFactor","observeFrequency","xUnit","toUpperCase","firstX","lastX","deltaX","shiftOffsetVal","getMedian","fastParseXYData","isXYdata","currentData","ascii","currentX","currentY","firstY","endLine","charCodeAt","newLine","isDifference","isLastDifference","lastDifference","isDuplicate","inComment","lastValue","isNegative","inValue","skipFirstValue","decimalPosition","duplicate","ascii2","parseXYA","removeSymbolRegExp","isXYAdata","lines","split","trim","parsePeakTable","removeCommentRegExp","peakTableSplitRegExp","isPeaktable","logs","jcamp","ldr","dataValue","ldrs","position","infos","wantXY","Date","now","ntuples","spectra","info","action","time","substring","xIndex","yIndex","firstVariable","secondVariable","symbol","first","last","lastY","vardim","units","yUnit","datatable","title","dataType","twoD","maxX","minX","minY","xType","indirectFrequency","shiftOffsetNum","varname","vartype","varform","yType","page","pageValue","pageSymbol","pageSymbolIndex","unit","sampleDescription","match","keys","newNtuples","zData","minZ","maxZ","ySize","xSize","xVector","noise","map","convertTo3DZ","contourLines","povarHeight0","povarHeight1","povarHeight2","povarHeight3","isOver0","isOver1","isOver2","isOver3","pAx","pAy","pBx","pBy","lineZValue","nbSubSpectra","nbPovars","dy","contourLevels","level","contourLevel","side","zValue","iSubSpectra","subSpectra","subSpectraAfter","povar","segments","generateContourLines","add2D","times","series","ms","existingGCMSFields","label","complexChromatogram","intensity","simpleChromatogram","convert","JcampConverter","useWorker","postToWorker","stamps","worker","createWorker","Promise","resolve","stamp","postMessage","JSON","stringify","workerURL","URL","createObjectURL","Blob","type","Worker","revokeObjectURL","addEventListener","event","parse","createTree","flatten","flat","stack","ntupleLevel","spaces","includes","line","labelLine","startsWith","join","children","finished","pop","entry","sortX","sortFunc","grouped","val","response","uniqueX","xs","ys","counter","parseXY","text","normalize","arrayType","xColumn","yColumn","keepInfo","maxNumberColumns","minNumberColumns","fields","uniqueXFunction","newResult","_interopDefault","ex","addPeak","wavelength","existing","kind","getPeakKind","minIntensity","maxIntensity","peakPicking","targetWavelength","range","bestPeak","newError","setBestPeak","getClosest","previousIndex","findClosest","bestInRange","json","minWavelength","maxWavelength","check","setPeaks","getData","getAnnotations","fillColor","strokeColor","creationFct","annotation","strokeWidth","anchor","color","oneAnnotation","autoPeakPicking","fromWavelength","toWavelength","replaceExisting","mlGsd","absorbance","filter","peakLoop","jcampconverter","xyParser"],"mappings":"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"}